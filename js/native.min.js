'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// eventEmiter.js
//

/*

option for cookie:
name - name cookie
value - value cookie
options:
  expires - time life for coolie in seconds
  path - path for cookie
  domain - domain for cookie
  secure - true/false if need send cookie with secure canal

*/

var Cookie = exports.Cookie = function () {
  function Cookie() {
    _classCallCheck(this, Cookie);
  }

  _createClass(Cookie, null, [{
    key: 'getCookies',
    value: function getCookies(name) {
      var cookies = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = document.cookie.split('; ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cookie = _step.value;

          var _cookie$split = cookie.split('='),
              _cookie$split2 = _slicedToArray(_cookie$split, 2),
              _name = _cookie$split2[0],
              value = _cookie$split2[1];

          cookies[_name] = decodeURIComponent(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return cookies[name] ? JSON.parse(cookies[name]) : [];
    }
  }, {
    key: 'setCookie',
    value: function setCookie(name, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        expires: 3600
      };

      var expires = options.expires;

      if (typeof expires == 'number' && expires) {
        var d = new Date();
        d.setTime(d.getTime() + expires * 1000);
        expires = options.expires = d;
      }

      if (expires && expires.toUTCString) {
        options.expires = expires.toUTCString();
      }

      value = encodeURIComponent(JSON.stringify(value));
      var updatedCookie = name + '=' + value;

      for (var propName in options) {
        updatedCookie += '; ' + propName;
        var propValue = options[propName];
        if (propValue !== true) {
          updatedCookie += '=' + propValue;
        }
      }

      document.cookie = updatedCookie;
    }
  }, {
    key: 'deleteCookie',
    value: function deleteCookie(name) {
      this.setCookie(name, '');
    }
  }]);

  return Cookie;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// native.js
//

var Native = exports.Native = function () {
  function Native() {
    _classCallCheck(this, Native);
  }

  _createClass(Native, [{
    key: '_reChangedDomHTML',


    //
    // getHTML() {
    //   let temp = document.createElement('template');
    //   if (temp.content) {
    //     // for (let i = 0; i < this.dom.length - 2; i++) {
    //     //   if (this.dom[i] === '#') {
    //     //     let buf = this.dom[i];
    //     //     for (let j = i + 1; j < this.dom.length - 2; j++) {
    //     //       buf += this.dom[j];
    //
    //     //       //call func for lexer/syntax analyze
    //
    //     //       if (utilities[buf])
    //     //         debugger;
    //     //     }
    //     //   }
    //     // }
    //
    //     temp.innerHTML = eval('`' + this.dom + '`');
    //
    //     /*
    //      * Call func after parse Dom
    //     */
    //
    //     if (this.functions) {
    //       this.functions.map( (func) => {
    //         func.call(this, temp.content);
    //       });
    //     }
    //
    //   }
    //   return temp.content;
    // }

    /*
     *  Call name func after parse Dom
    */

    // callFuncAfterParseDom(...functions) {
    //   this.functions = functions;
    // }


    /*
     *  Func for render HTML
    */

    value: function _reChangedDomHTML() {
      Observer.emit(Variables.responseToRequest, this);
    }

    /*
     * set Value Data By Attribute to Dom
    */

  }], [{
    key: '_setValueDataByAttr',
    value: function _setValueDataByAttr(dom) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      debugger;
      for (var key in data) {

        // json have key fields
        if (key === Variables.paramsJSON.fields.name) {

          var fieldsConst = Variables.paramsJSON.fields;

          // unique field in component
          for (var fieldsID in data[key]) {

            var uniqueField = data[key][fieldsID];
            var _element = dom.getAttribute(fieldsID);
            debugger;
            // all params in unique field
            for (var param in uniqueField) {

              switch (uniqueField[param]) {
                case fieldsConst.text:
                  _element.innerHTML = fields[fieldsID];
                  break;

                default:
                  console.log('Don\'t key in Native: ' + fieldsID);
                  break;
              }
            }
          }
        }

        element.setAttribute(key, data[key]);
      }
    }
  }, {
    key: 'setValueDataByAttr',
    value: function setValueDataByAttr() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


      // if (data[Variables.paramsJSONId] === 'test') {
      //   const element = document.getElementById(data[Variables.paramsJSONId]);
      //   if (element) {
      //
      //     this._setValueAttrByComponent(element, data);
      //   }
      // } else {

      for (var key in data) {
        var _element2 = document.getElementById(key);

        if (_element2 && !_element2.hasAttribute(Variables.paramsJSONAdded)) {
          this._setValueAttrByComponent(_element2, data[key]);
          break;
        } else if (_typeof(data[key]) === 'object') {
          this.setValueDataByAttr(data[key]);
        }
      }
      // }
    }
  }, {
    key: '_setValueAttrByComponent',
    value: function _setValueAttrByComponent(element, params) {
      for (var attr in params) {
        if (attr !== Variables.paramsJSONChildren) {
          element.setAttribute(attr, params[attr]);
        }
      }
      if (params[Variables.paramsJSONChildren]) {
        this._addChildrenToComponent(element, params[Variables.paramsJSONChildren]);
      }
      element.setAttribute(Variables.paramsJSONAdded, '');
    }
  }, {
    key: '_addChildrenToComponent',
    value: function _addChildrenToComponent(component, params) {
      var template = document.createElement('template');

      if (component.tagName === 'SELECT') {
        var child = component.firstElementChild;
        var tagName = child.tagName;
        var attributes = child.attributes;
        for (var key in params) {
          var tag = document.createElement(tagName);
          var text = params[key];
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var attr = _step.value;

              tag.setAttribute(attr.name, text);
              tag.text = text;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          template.content.appendChild(tag);
        }
        component.innerHTML = template.innerHTML;
      } else if (component.tagName === 'INPUT') {}
    }

    /*
     * get Value Data By Attribute to Dom
    */

  }, {
    key: 'getValueDataByAttr',
    value: function getValueDataByAttr(dom) {
      var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var elements = dom.getAttribute(attr);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _element3 = _step2.value;

          for (var key in data) {
            _element3.setAttribute(key, data[key]);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    /* 
     *  get and post request with callback
    */

  }, {
    key: 'request',
    value: function request(url) {
      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


      var XHR = 'onload' in new XMLHttpRequest() ? XMLHttpRequest : XDomainRequest;
      var xhr = new XHR();
      xhr.open(method, url, true);

      if (method === 'GET') {
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      } else if (method === 'POST') {
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      }

      xhr.send(params);

      this.requestOn = true;

      xhr.onload = function (response) {
        Observer.emit(Variables.responseToRequest, response.currentTarget.responseText);
      };

      xhr.onerror = function () {
        console.log('Error API to url ' + url + ' : ' + this);
      };
    }
  }]);

  return Native;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// observer.js
//

var isFunction = function isFunction(obj) {
  return typeof obj == 'function' || false;
};

var listeners = new Map();
var listenersRemoving = new Map();

var Observer = exports.Observer = function () {
  function Observer() {
    _classCallCheck(this, Observer);
  }

  _createClass(Observer, null, [{
    key: 'addListener',
    value: function addListener(eventName, callback) {
      var isRemoveListenerAfterComplete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      this.listeners.has(eventName) || this.listeners.set(eventName, []);
      this.listeners.get(eventName).push(callback);
      if (isRemoveListenerAfterComplete) {
        this.listenersRemoving.has(eventName) || this.listenersRemoving.set(eventName, []);
        this.listenersRemoving.get(eventName).push(callback);
      }
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventName, callback) {
      var listeners = this.listeners.get(eventName);
      var index = void 0;

      if (listeners && listeners.length) {
        index = listeners.reduce(function (i, listener, index) {
          return isFunction(listener) && listener === callback ? i = index : i;
        }, -1);
        if (index > -1) {
          listeners.splice(index, 1);
          this.listeners.set(eventName, listeners);
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'emit',
    value: function emit(eventName) {
      var result = false;
      var listeners = this.listeners.get(eventName);
      var listenersRemoving = this.listenersRemoving.get(eventName);

      if (listeners && listeners.length) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var listener = _step.value;

            listener.apply(undefined, args);
            if (listenersRemoving) {
              for (var i = 0; i < listenersRemoving.length; i++) {
                if (listener === listenersRemoving[i]) {
                  this.removeListener(eventName, listenersRemoving[i]);
                  listenersRemoving.splice(i, 1);
                  this.listenersRemoving.set(eventName, listenersRemoving);
                  break;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        result = true;
      }

      return result;
    }
  }, {
    key: 'listeners',
    get: function get() {
      return listeners;
    }
  }, {
    key: 'listenersRemoving',
    get: function get() {
      return listenersRemoving;
    }
  }]);

  return Observer;
}();
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isRequestAPIGET = false;

var Parse = exports.Parse = function () {
  function Parse(page) {
    var _this = this;

    _classCallCheck(this, Parse);

    this.page = page;
    this.mainContent = page.getElementsByTagName(Variables.nameMainContent)[0];

    //TODO: remove later
    Native.request('/extranet/test/');

    this.response = function (response) {
      _this._showList(JSON.parse(response));
    };
    Observer.addListener(Variables.responseToRequest, this.response, true);
  }

  //TODO: remove later, this block for show list-hotels in asside


  _createClass(Parse, [{
    key: "_showList",
    value: function _showList(data) {
      // for (let users of data) {
      var counterForBusiness = 0;
      var users = {
        business: {
          "id": 0,
          "name": "ЧАО «Президент-отель»"
        },
        hotels: data
      };
      // for (let itemBusiness of users['business']) {
      $('.c-app-aside .aside_right .business').append('<h4 class="panel-title">' + '<a data-toggle="collapse" data-parent="#parent_collapse' + counterForBusiness + '" href="#parent_collapse' + counterForBusiness + '">' + users.business.name + '<b class="caret"></b></a>' + '</h4>');
      $('.c-app-aside .aside_right .businessContent').append("\n            <div id=\"parent_collapse" + counterForBusiness + "\" class=\"panel-collapse collapse\">\n              <div class=\"panel-body no_padding \">\n                <div class=\"panel-group\" id=\"accordion_aside_" + counterForBusiness + "\"></div>\n              </div>\n            </div>\n          ");

      var counterForHotels = 0;
      for (var hotel in users.hotels) {
        $("#accordion_aside_" + counterForBusiness).append("\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#accordion_aside_" + counterForBusiness + "\" class=\"collapsed\" id=\"" + users.hotels[hotel]['id'] + "_\" href=\"#collapse" + counterForHotels + "\"><img src=\"/images/aside_left_1.png\">" + users.hotels[hotel]['title'] + "</a>\n                  </h4>\n                </div>\n                <div id=\"collapse" + counterForHotels + "\" class=\"panel-collapse collapse\">\n                  <div class=\"panel-body\">\n                    <ul class=\"aside_submenu\">\n                      <li><a href=\"/extranet/dashboard/\" data-link><span class=\"travel-icon-1001\"></span>Dashboard</a></li>\n                      <li><a class=\"moderated\" href=\"/extranet/objects/\" data-link><span class=\"travel-icon-1379\"></span>\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u041E\u0431\u044A\u0435\u043A\u0442\u0430</a></li>\n                      <li><a class=\"ready\" href=\"/extranet/payment/\" data-link><span class=\"travel-icon-087\"></span>\u0426\u0435\u043D\u043E\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435</a></li>\n                      <li><a href=\"/extranet/booking/\" data-link><span class=\"travel-icon-007\"></span>\u0411\u0440\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435</a></li>\n                      <li><a href=\"/extranet/documents/\" data-link><span class=\"travel-icon-443\"></span>\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u044B</a></li>\n                      <li><a href=\"/extranet/analazy/\" data-link><span class=\"travel-icon-1364\"></span>\u0410\u043D\u0430\u043B\u0438\u0442\u0438\u043A\u0430</a></li>\n                      <li><a href=\"/extranet/users/\" data-link><span class=\"travel-icon-1027\"></span>\u0421\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0438</a></li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n          ");
        counterForHotels++;
      }
      counterForBusiness++;
      // }
      // }

      this._parsComponents(this.page);

      if (!isRequestAPIGET) {
        Observer.emit(Variables.documentIsReady, this.page);
      }
    }
  }, {
    key: "_changeComponentDom",
    value: function _changeComponentDom(component) {
      this.mainContent.innerHTML = component;
      this._parsComponents(this.mainContent);
      if (!isRequestAPIGET) {
        Observer.emit(Variables.documentIsReady, this.mainContent);
      }
    }
  }, {
    key: "_parsComponents",
    value: function _parsComponents(componentDom) {
      var _this2 = this;

      // if tag have a link to router
      componentDom.querySelectorAll("[" + Variables.routerAttr + "]").forEach(function (component) {
        var self = _this2;
        component.onclick = function () {
          Router.routing(this.getAttribute(Variables.routerHref));
          Native.request(this.getAttribute(Variables.routerHref));
          Observer.addListener(Variables.responseToRequest, function (component) {
            return self._changeComponentDom(component);
          }, true);
          return false;
        };
      });

      // if tag have a link to API GET request
      componentDom.querySelectorAll("[" + Variables.routerAPIGET + "]").forEach(function (component) {

        isRequestAPIGET = true;

        Native.request(component.getAttribute(Variables.routerAPIGET));
        component.removeAttribute(Variables.routerAPIGET);

        Observer.addListener(Variables.responseToRequest, function (response) {
          Native.setValueDataByAttr(JSON.parse(response));
          Observer.emit(Variables.documentIsReady, component);
        }, true);
      });

      // if tag have a link to API POST request
      componentDom.querySelectorAll("[" + Variables.routerAPIPOST + "]").forEach(function (component) {
        component.onclick = function () {
          Native.request(component.getAttribute(Variables.routerAPIGET), Native.getValueDataByAttr());
          return false;
        };
      });
    }
  }]);

  return Parse;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var currentLink = '';

var Router = exports.Router = function () {
  function Router() {
    _classCallCheck(this, Router);
  }

  _createClass(Router, null, [{
    key: 'start',
    value: function start() {
      var _this = this;

      this.urls = urls;
      this.parse = new Parse(document.body);
      this.routing(window.location.pathname, true);

      window.onpopstate = function (obj) {
        console.log(obj.state);
        _this.routing(document.location.pathname, true);
      };
    }
  }, {
    key: 'routing',
    value: function routing(url) {
      var isHistoryBack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


      if (url !== currentLink) {

        currentLink = url;
        var curURL = this.urls[url];

        if (curURL) {
          document.title = curURL.title;
          console.log(curURL);
        } else {
          console.log('/404');
        }

        if (!isHistoryBack) {
          history.pushState({ url: url }, '', url);
        }
      }
    }

    /*
     * TODO: need for bicycle, later it's removed
    */

  }, {
    key: '_bicycle',
    value: function _bicycle(url) {
      $('div.autoload').each(function () {});
    }
  }]);

  return Router;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// variables.js
//

var nameApp = 'app';
var routerAPIGET = 'data-api-get';
var routerAPIPOST = 'data-api-post';
var routerHref = 'href';
var routerAttr = 'data-link';
var nameMainContent = 'app-main';
var paramsJSONAttr = 'attr';

// JSON const
var paramsJSONId = 'id';
var paramsJSONChildren = 'children';
var paramsJSONAdded = 'data-api-added';

// Observer
var responseToRequest = 'responseToRequest';
var documentIsReady = 'documentIsReady';

var Variables = exports.Variables = function () {
  function Variables() {
    _classCallCheck(this, Variables);
  }

  _createClass(Variables, null, [{
    key: 'nameApp',
    get: function get() {
      return nameApp;
    }
  }, {
    key: 'routerAPIGET',
    get: function get() {
      return routerAPIGET;
    }
  }, {
    key: 'routerAPIPOST',
    get: function get() {
      return routerAPIPOST;
    }
  }, {
    key: 'routerHref',
    get: function get() {
      return routerHref;
    }
  }, {
    key: 'routerAttr',
    get: function get() {
      return routerAttr;
    }
  }, {
    key: 'nameMainContent',
    get: function get() {
      return nameMainContent;
    }
  }, {
    key: 'paramsJSONId',
    get: function get() {
      return paramsJSONId;
    }
  }, {
    key: 'paramsJSONChildren',
    get: function get() {
      return paramsJSONChildren;
    }
  }, {
    key: 'paramsJSONAdded',
    get: function get() {
      return paramsJSONAdded;
    }
  }, {
    key: 'responseToRequest',
    get: function get() {
      return responseToRequest;
    }
  }, {
    key: 'documentIsReady',
    get: function get() {
      return documentIsReady;
    }
  }]);

  return Variables;
}();