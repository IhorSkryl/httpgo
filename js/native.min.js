'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// eventEmiter.js
//

/*

option for cookie:
name - name cookie
value - value cookie
options:
  expires - time life for coolie in seconds
  path - path for cookie
  domain - domain for cookie
  secure - true/false if need send cookie with secure canal

*/

var Cookie = exports.Cookie = function () {
  function Cookie() {
    _classCallCheck(this, Cookie);
  }

  _createClass(Cookie, null, [{
    key: 'getCookies',
    value: function getCookies(name) {
      var cookies = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = document.cookie.split('; ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cookie = _step.value;

          var _cookie$split = cookie.split('='),
              _cookie$split2 = _slicedToArray(_cookie$split, 2),
              _name = _cookie$split2[0],
              value = _cookie$split2[1];

          cookies[_name] = decodeURIComponent(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return cookies[name] ? JSON.parse(cookies[name]) : [];
    }
  }, {
    key: 'setCookie',
    value: function setCookie(name, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        expires: 3600
      };

      var expires = options.expires;

      if (typeof expires == 'number' && expires) {
        var d = new Date();
        d.setTime(d.getTime() + expires * 1000);
        expires = options.expires = d;
      }

      if (expires && expires.toUTCString) {
        options.expires = expires.toUTCString();
      }

      value = encodeURIComponent(JSON.stringify(value));
      var updatedCookie = name + '=' + value;

      for (var propName in options) {
        updatedCookie += '; ' + propName;
        var propValue = options[propName];
        if (propValue !== true) {
          updatedCookie += '=' + propValue;
        }
      }

      document.cookie = updatedCookie;
    }
  }, {
    key: 'deleteCookie',
    value: function deleteCookie(name) {
      this.setCookie(name, '');
    }
  }]);

  return Cookie;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// native.js
//

var Native = exports.Native = function () {
  function Native() {
    _classCallCheck(this, Native);
  }

  _createClass(Native, null, [{
    key: 'getHTMLDom',


    /*
    *   get HTML bu template string
    */

    value: function getHTMLDom(component, data, parent) {
      var isRemove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var temp = document.createElement('template');
      var result = void 0;

      if (temp.content && this.isElement(component)) {
        temp.innerHTML = eval('`' + component.innerHTML + '`');

        if (this.isElement(parent)) {
          parent.appendChild(temp.content);
          result = parent.lastElementChild;
        } else {
          component.parentElement.appendChild(temp.content);
          result = component.parentElement.lastElementChild;
        }

        if (isRemove) {
          component.parentNode.removeChild(component);
        }
      } else {
        console.log('It\'s not dom component: ' + component);
      }
      return result;
    }

    /*
    *   add parse to Dynamic Component
    */

  }, {
    key: 'reChangeDomDynamically',
    value: function reChangeDomDynamically(component) {
      if (this.isElement(component)) {
        Parse.parsComponents(component);
      } else {
        console.log('This component is not dom: ', component);
      }
    }

    /*
    *   current Id dynamically page
    */

  }, {
    key: 'jsonParse',


    /*
    *   parse JSON is safely
    */

    value: function jsonParse(response) {
      try {
        return JSON.parse(response);
      } catch (e) {
        console.log(e, response);
        alert(e); // error in the above string (in this case, yes)!
      }
    }

    /*
     *  get and post request with callback
     */

  }, {
    key: 'request',
    value: function request(url, callback, data) {

      var method = 'GET';
      var body = ['\r\n'];

      var XHR = 'onload' in new XMLHttpRequest() ? XMLHttpRequest : XDomainRequest;
      var xhr = new XHR();

      if (data) {
        method = 'POST';
      }

      xhr.open(method, url, true);

      if (data) {
        var boundary = String(Math.random()).slice(2);
        var boundaryMiddle = '--' + boundary + '\r\n';
        var boundaryLast = '--' + boundary + '--\r\n';

        for (var key in data) {
          body.push('Content-Disposition: form-data; name="' + key + '"\r\n\r\n' + data[key] + '\r\n');
        }

        body = body.join(boundaryMiddle) + boundaryLast;
        xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
      }

      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      xhr.send(body);

      xhr.onload = function (response) {
        if (callback) {
          callback(response.currentTarget.responseText, url);
        } else {
          Observer.emit(Variables.responseToRequest, response.currentTarget.responseText, url);
        }
      };

      xhr.onerror = function () {
        console.log('Error API to url ' + url + ' : ' + this);
      };
    }

    /*
    *   Set Value Data By Attribute to Dom
    */

  }, {
    key: 'setValueDataByAttr',
    value: function setValueDataByAttr() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


      ParseJSON.parseDataGet(data['fields'], ParseJSON.setAttrToComponent.bind(ParseJSON));

      var obj = data['form'];
      var element = document.getElementById(obj['id']);

      if (this.isElement(element)) {
        for (var key in obj) {
          element.setAttribute(key, obj[key]);
        }
      }

      obj = data['data'];
      for (var _key in obj) {
        ParseJSON.parseDataGet(obj[_key], ParseJSON.insertValueToComponent.bind(ParseJSON), '', true);
      }
    }

    /*
     *  returns true if it is a DOM element
    */

  }, {
    key: 'isElement',
    value: function isElement(obj) {
      return (typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement)) === "object" ? obj instanceof HTMLElement : //DOM2
      obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === "object" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === "string";
    }

    /*
    *   Find first ancestor by class
    */

  }, {
    key: 'findAncestorByClass',
    value: function findAncestorByClass(element, className) {
      if (this.isElement(element) && typeof className === 'string') {
        while (!element.classList.contains(className) && (element = element.parentElement)) {}
      }
      return element;
    }

    /*
     *   set default data for Fields
     */

  }, {
    key: 'setDefaultFields',
    value: function setDefaultFields(component, fields, str) {
      if (this.isElement(component) && fields) {
        ParseJSON.setValue(component, fields, ParseJSON.setAttrToComponent.bind(ParseJSON), str, true);
      }
    }

    /*
     *   insert data for data
     */

  }, {
    key: 'insertData',
    value: function insertData(component, data, str) {
      if (this.isElement(component) && data) {
        ParseJSON.setValue(component, data, ParseJSON.insertValueToComponent.bind(ParseJSON), str);
      }
    }
  }, {
    key: 'getIdCurrentPage',
    get: function get() {
      return Parse.idCurrentPage;
    }
  }]);

  return Native;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// observer.js
//

var isFunction = function isFunction(obj) {
  return typeof obj == 'function' || false;
};

var listeners = new Map();

var Observer = exports.Observer = function () {
  function Observer() {
    _classCallCheck(this, Observer);
  }

  _createClass(Observer, null, [{
    key: 'addListener',
    value: function addListener(eventName, callback) {

      var listeners = this.listeners.get(eventName);
      var isListener = false;

      if (listeners && listeners.length) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var listener = _step.value;

            if (listener === callback) {
              isListener = true;
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      if (!isListener) {
        this.listeners.has(eventName) || this.listeners.set(eventName, []);
        this.listeners.get(eventName).push(callback);
      }
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventName, callback) {
      var listeners = this.listeners.get(eventName);
      var index = void 0;

      if (listeners && listeners.length) {
        index = listeners.reduce(function (i, listener, index) {
          return isFunction(listener) && listener === callback ? i = index : i;
        }, -1);
        if (index > -1) {
          listeners.splice(index, 1);
          this.listeners.set(eventName, listeners);
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'emit',
    value: function emit(eventName) {
      var result = false;
      var listeners = this.listeners.get(eventName);

      if (listeners && listeners.length) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = listeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var listener = _step2.value;

            var isRemove = listener.apply(undefined, args);
            if (isRemove) {
              this.removeListener(eventName, listener);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        result = true;
      }

      return result;
    }
  }, {
    key: 'listeners',
    get: function get() {
      return listeners;
    }
  }]);

  return Observer;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isRequestAPI = 0;
var scriptIncludes = [];
var idCurrentPage = void 0;

var Parse = exports.Parse = function () {
  function Parse() {
    _classCallCheck(this, Parse);
  }

  _createClass(Parse, null, [{
    key: 'start',
    value: function start(page) {
      this.page = page;
      this.mainContent = page.getElementsByTagName(Variables.nameMainContent)[0];
      this.parsComponents(this.page);
      this._documentIsReady(this.page);
    }
  }, {
    key: 'parsComponents',
    value: function parsComponents(componentDom) {

      // if tag have a link to router
      this._routerLink(componentDom);

      // for form TODO: need refactoring
      componentDom.querySelectorAll('' + Variables.nameForm).forEach(function (component) {
        var elements = component.querySelectorAll('button, input[type=button]');
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var element = _step.value;

            element.onclick = function () {
              saveForm(component, function () {
                alert('Ваша форма сохранена');
              }, function () {
                alert('Произошла ошибка, повторите попытку');
              });
            };
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      // if tag have a app-script
      componentDom.querySelectorAll(Variables.dynamicallyScript).forEach(function (scriptComponent) {
        scriptIncludes.push(scriptComponent.getAttribute('src'));
      });

      // if tag have a link to API GET request
      this._APIGetRequest(componentDom);

      // if tag have a link to API POST request
      this._APIPostRequest(componentDom);
    }

    /*
    *    change Component dynamically
    */

  }, {
    key: '_changeComponentDom',
    value: function _changeComponentDom(component) {
      isRequestAPI = 0;
      this.mainContent.innerHTML = component;
      this.parsComponents(this.mainContent);
      this._documentIsReady(this.mainContent);
    }
  }, {
    key: '_routerLink',


    /*
    *   parse Router link for dynamically component
    */

    value: function _routerLink(componentDom) {
      var _this = this;

      componentDom.querySelectorAll('[' + Variables.routerAttr + ']').forEach(function (component) {
        var self = _this;
        component.onclick = function () {
          idCurrentPage = this.getAttribute(Variables.paramsJSONId);
          var url = this.getAttribute(Variables.routerHref);

          Native.request(url, function (component) {
            self._changeComponentDom(component);
            Router.routing(url);
          });

          return false;
        };
      });
    }

    /*
     *   parse API get request by tag 'data-api-get'
     */

  }, {
    key: '_APIGetRequest',
    value: function _APIGetRequest(componentDom) {
      var _this2 = this;

      componentDom.querySelectorAll('[' + Variables.routerAPIGET + ']').forEach(function (component) {

        ++isRequestAPI;

        var src = component.getAttribute(Variables.routerAPIGET);

        if (idCurrentPage) {
          src += '?id=' + idCurrentPage;
        }

        Native.request(src, function (response) {
          Native.setValueDataByAttr(Native.jsonParse(response));
          --isRequestAPI;
          _this2._documentIsReady(component);
        });

        component.removeAttribute(Variables.routerAPIGET);
      });
    }

    /*
    *   parse API post request by tag 'data-api-post'
    */

  }, {
    key: '_APIPostRequest',
    value: function _APIPostRequest(componentDom) {
      var _this3 = this;

      componentDom.querySelectorAll('[' + Variables.routerAPIPOST + ']').forEach(function (component) {

        ++isRequestAPI;

        var data = {};

        if (idCurrentPage) {
          data.id = idCurrentPage;
        }

        Native.request(component.getAttribute(Variables.routerAPIPOST), function (response) {
          Native.setValueDataByAttr(Native.jsonParse(response));
          --isRequestAPI;
          _this3._documentIsReady(component);
        }, data);

        component.removeAttribute(Variables.routerAPIPOST);
      });
    }

    /*
    *   import script dynamically
    */

  }, {
    key: '_importScript',
    value: function _importScript(component) {
      var scriptsComponent = [];

      component.querySelectorAll(Variables.dynamicallyScript).forEach(function (dom) {
        scriptsComponent.push(dom.getAttribute('src'));
      });

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = scriptIncludes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var script = _step2.value;

          var normalized = System.normalizeSync(script);
          if (System.has(normalized) && scriptsComponent.includes(script)) {
            System.delete(normalized);
          }
          System.import(script);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: '_documentIsReady',
    value: function _documentIsReady(component) {
      if (isRequestAPI === 0) {
        Observer.emit(Variables.documentIsReady, component);
        this._importScript(component);
      }
    }
  }, {
    key: 'idCurrentPage',
    get: function get() {
      return idCurrentPage;
    }
  }]);

  return Parse;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ParseJSON = exports.ParseJSON = function () {
  function ParseJSON() {
    _classCallCheck(this, ParseJSON);
  }

  _createClass(ParseJSON, null, [{
    key: 'parseDataGet',


    /*
     *   When need recursion for table
     */

    value: function parseDataGet(data, callback) {
      var strForTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var isDataTable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


      for (var id in data) {

        if (data[id] !== null) {
          var component = void 0;

          if (strForTable.length === 0) {
            component = document.getElementById(id);
          } else {
            component = document.getElementById(strForTable + ':' + id);
          }

          if (Native.isElement(component)) {
            callback(component, data[id]);
          }

          // has prefix "tableid_" for recursion
          else if (id.startsWith(Variables.paramsJSONTable)) {
              if (isDataTable) {
                callback(component, data[id], id.replace(new RegExp('^' + Variables.paramsJSONTable), ''));
              } else {
                this.parseDataGet(data[id][Variables.paramsJSONList], callback, id.replace(new RegExp('^' + Variables.paramsJSONTable), ''), isDataTable);
              }
            }
        }
      }
    }

    /*
    *   set attributes to component
    */

  }, {
    key: 'setAttrToComponent',
    value: function setAttrToComponent(component) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


      for (var attr in params) {

        // if attr === type
        if (attr === Variables.paramsJSONType) {
          if (params[attr] !== Variables.paramsJSONSet && params[attr] !== Variables.paramsJSONEnum) {
            component.setAttribute(attr, params[attr]);
          }
        }

        // if attr !== list
        else if (attr !== Variables.paramsJSONList && attr !== Variables.paramsJSONTitle) {
            component.setAttribute(attr, params[attr]);
          }
      }

      var func = this.components[component.tagName];

      try {
        if (typeof func !== 'undefined') {

          // if has attr in params 'list'
          if (_typeof(params[Variables.paramsJSONList]) === 'object' && func.createList) {
            func.createList(component, params[Variables.paramsJSONList], params[Variables.paramsJSONType] === Variables.paramsJSONSet);
          }

          // if has attr in params 'title'
          else if (params[Variables.paramsJSONTitle] && func.setDefaultAttr) {
              func.setDefaultAttr(component, params[Variables.paramsJSONTitle]);
            }
        } else {
          console.log('Not found in frame: ' + component.tagName);
        }
      } catch (e) {
        console.log(e, component, params);
      }
    }

    /*
     *   Insert data after create component
     */

  }, {
    key: 'insertValueToComponent',
    value: function insertValueToComponent(component, attr) {
      var _this = this;

      var strForTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';


      var insertValueCurrentComponent = function insertValueCurrentComponent(component, attr) {
        var func = _this.components[component.tagName];
        if (func && func.addAttrToComponent) {
          return func.addAttrToComponent(component, attr);
        } else {
          component.textContent = attr;
          console.log('Not found: ' + component.tagName);
        }
      };

      function setNewAttrIdAndName(component, id, index) {
        component.setAttribute('name', id + '[' + index + ']');
        component.setAttribute('id', id + '-' + index);
      }

      if (attr != null) {

        if (strForTable.length !== 0 && Object.prototype.toString.call(attr) === '[object Array]' && attr.length !== 0) {

          var isFirstComponent = true;
          var newComponents = void 0;
          var parent = void 0;

          attr.forEach(function (element, index) {

            var addComponent = void 0;

            if (newComponents) {
              addComponent = newComponents.cloneNode(true);
            }

            for (var id in element) {

              var _component = void 0;
              var idComponent = strForTable + ':' + id;

              if (isFirstComponent) {
                _component = document.getElementById(idComponent);

                if (_component) {
                  if (!parent) {
                    parent = Native.findAncestorByClass(_component, Variables.paramsJSONIdForTable);
                    var temp = document.createElement('template');
                    temp.innerHTML = parent.innerHTML;
                    newComponents = temp;
                  } else {
                    insertValueCurrentComponent(_component, element[id]);
                    setNewAttrIdAndName(_component, idComponent, index);
                  }
                }
              } else if (newComponents && parent) {
                try {
                  debugger;
                  var newComponent = addComponent.content.querySelector('[name="' + strForTable + ':' + id + '"]');
                  if (newComponent) {
                    insertValueCurrentComponent(newComponent, element[id]);
                    setNewAttrIdAndName(newComponent, idComponent, index);
                  }
                } catch (e) {
                  console.log(e);
                  alert(e);
                }
              }
            }

            if (parent && addComponent) {
              parent.appendChild(addComponent.content);
            }

            isFirstComponent = false;
          });
          // const component = document.getElementById(`${ strForTable }:${ attr[id] }`);
        } else if (Native.isElement(component) && attr.length !== 0) {
          insertValueCurrentComponent(component, attr);
        }
      }
    }
  }, {
    key: 'insertDataToAttrSetText',
    value: function insertDataToAttrSetText(component) {
      var textContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (component.children && component.children.length !== 0) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = component.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var child = _step.value;

            this.insertDataToAttrSetText(child, textContent);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      if (component.hasAttribute(Variables.paramsJSONSetText)) {
        component.textContent = textContent;
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(component, attr, callback) {
      var str = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      var isDefault = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var strTable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';


      for (var name in attr) {
        var nameField = void 0;

        if (strTable.length !== 0) {
          nameField = isDefault ? strTable + ':' + name : strTable + ':' + name + str;
        } else {
          nameField = isDefault ? '' + name : '' + name + str;
        }

        var dom = component.querySelector('[name="' + nameField + '"]');

        if (name.startsWith(Variables.paramsJSONTable)) {
          this.setValue(component, attr[name], callback, str, isDefault, name.replace(new RegExp('^' + Variables.paramsJSONTable)));
        } else if (dom) {
          if (isDefault) {
            var intArray = str.match(/\d+/g);
            dom.setAttribute('name', '' + nameField + str);
            dom.setAttribute('id', nameField + '-' + (intArray ? intArray.join('') : ''));
          }
          callback(dom, attr[name]);
        }
      }
    }
  }, {
    key: 'components',
    get: function get() {
      return {
        'SELECT': Select,
        'INPUT': Input,
        'TEXTAREA': TextArea
      };
    }
  }]);

  return ParseJSON;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var currentLink = '';

var Router = exports.Router = function () {
  function Router() {
    _classCallCheck(this, Router);
  }

  _createClass(Router, null, [{
    key: 'start',
    value: function start() {
      var _this = this;

      this.urls = urls;
      Parse.start(document.body);
      this.routing(window.location.pathname, true);

      window.onpopstate = function (obj) {
        console.log(obj.state);
        _this.routing(document.location.pathname, true);
      };
    }
  }, {
    key: 'routing',
    value: function routing(url) {
      var isHistoryBack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


      if (url !== currentLink) {

        currentLink = url;
        var curURL = this.urls[url];
        if (curURL) {
          document.title = curURL.title;
          console.log(curURL);
        } else {
          console.log('/404');
        }

        if (!isHistoryBack) {
          history.pushState({ url: url }, '', url);
        }
      }
    }
  }]);

  return Router;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// variables.js
//


// common
var routerAPIGET = 'data-api-get';
var routerAPIPOST = 'data-api-post';
var routerHref = 'href';
var routerAttr = 'data-link';
var nameForm = 'form';
var nameMainContent = 'app-main';
var dynamicallyScript = 'app-script';

// JSON
var paramsJSONId = 'data-api-post-id';
var paramsJSONSetText = 'data-set-text';
var paramsJSONTable = 'tableid_';
var paramsJSONPhotos = 'photoid_photos';
var paramsJSONForPost = 'value';
var paramsJSONIdForTable = 'native-table-id';

// JSON reserved words
var paramsJSONList = 'list';
var paramsJSONTitle = 'title';
var paramsJSONSet = 'set';
var paramsJSONEnum = 'enum';
var paramsJSONType = 'type';

// Observer
var responseToRequest = 'responseToRequest';
var documentIsReady = 'documentIsReady';
var reChangeDomDynamically = 'reChangeDomDynamically';

var Variables = exports.Variables = function () {
  function Variables() {
    _classCallCheck(this, Variables);
  }

  _createClass(Variables, null, [{
    key: 'routerAPIGET',


    /*
     *  Common
    */

    get: function get() {
      return routerAPIGET;
    }
  }, {
    key: 'routerAPIPOST',
    get: function get() {
      return routerAPIPOST;
    }
  }, {
    key: 'routerHref',
    get: function get() {
      return routerHref;
    }
  }, {
    key: 'routerAttr',
    get: function get() {
      return routerAttr;
    }
  }, {
    key: 'nameForm',
    get: function get() {
      return nameForm;
    }
  }, {
    key: 'nameMainContent',
    get: function get() {
      return nameMainContent;
    }
  }, {
    key: 'dynamicallyScript',
    get: function get() {
      return dynamicallyScript;
    }

    /*
     * JSON
    */

  }, {
    key: 'paramsJSONId',
    get: function get() {
      return paramsJSONId;
    }
  }, {
    key: 'paramsJSONSetText',
    get: function get() {
      return paramsJSONSetText;
    }
  }, {
    key: 'paramsJSONTable',
    get: function get() {
      return paramsJSONTable;
    }
  }, {
    key: 'paramsJSONPhotos',
    get: function get() {
      return paramsJSONPhotos;
    }
  }, {
    key: 'paramsJSONForPost',
    get: function get() {
      return paramsJSONForPost;
    }
  }, {
    key: 'paramsJSONIdForTable',
    get: function get() {
      return paramsJSONIdForTable;
    }

    /*
     *  JSON reserved words
    */

  }, {
    key: 'paramsJSONList',
    get: function get() {
      return paramsJSONList;
    }
  }, {
    key: 'paramsJSONTitle',
    get: function get() {
      return paramsJSONTitle;
    }
  }, {
    key: 'paramsJSONSet',
    get: function get() {
      return paramsJSONSet;
    }
  }, {
    key: 'paramsJSONEnum',
    get: function get() {
      return paramsJSONEnum;
    }
  }, {
    key: 'paramsJSONType',
    get: function get() {
      return paramsJSONType;
    }

    /*
     * Observer
    */

  }, {
    key: 'responseToRequest',
    get: function get() {
      return responseToRequest;
    }
  }, {
    key: 'documentIsReady',
    get: function get() {
      return documentIsReady;
    }
  }, {
    key: 'reChangeDomDynamically',
    get: function get() {
      return reChangeDomDynamically;
    }
  }]);

  return Variables;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Input = exports.Input = function () {
  function Input() {
    _classCallCheck(this, Input);
  }

  _createClass(Input, null, [{
    key: 'classNameByTag',
    value: function classNameByTag(tag) {
      return this.classNames[tag] ? this.classNames[tag] : this.defaultClassName;
    }

    /*
     *   set default value
     */

  }, {
    key: 'setDefaultAttr',
    value: function setDefaultAttr(component, attr) {

      var className = this.classNameByTag(component.type);
      var result = void 0;

      if (className) {
        result = Native.findAncestorByClass(component, className);
      }

      if (result) {
        ParseJSON.insertDataToAttrSetText(result, attr);
      } else {
        throw new SyntaxError('\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B, \u043F\u043E\u043B\u0435 input');
      }
    }

    /*
     *   create inputs
     */

  }, {
    key: 'createList',
    value: function createList(component, list) {
      var isSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isReturnDomString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


      this.isSet = isSet;

      var typeComponent = component.getAttribute('type');
      var className = this.classNameByTag(typeComponent);

      if (className) {

        var idComponent = component.id;
        component = Native.findAncestorByClass(component, className);

        if (component) {

          var template = document.createElement('template');

          for (var item in list) {
            if (typeof list[item] === 'string') {
              var newComponent = component.firstElementChild.cloneNode(true);
              this._appendDomToComponent(newComponent, template.content, list[item]);
              template.content.appendChild(newComponent);
            }
          }

          if (isReturnDomString) {
            return template.innerHTML;
          }

          component.id = idComponent;
          component.innerHTML = template.innerHTML;
        }
      }
    }

    /*
     *   selected active item for input and set value
     */

  }, {
    key: 'addAttrToComponent',
    value: function addAttrToComponent(component) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';


      switch (component.getAttribute('type')) {

        // radio || checkbox

        case 'radio':
        case 'checkbox':
          component.checked = !(value === '0');
          break;

        // other types for input

        default:
          component.value = value;
          break;
      }
    }
  }, {
    key: '_appendDomToComponent',
    value: function _appendDomToComponent(component, parent) {
      var textContent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';


      if (component && component.children && component.children.length !== 0) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = component.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var child = _step.value;

            this._appendDomToComponent(child, parent, textContent);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      if (component.tagName === 'INPUT') {
        if (this.isSet) {
          component.name += '[' + parent.children.length + ']';
        }
        component.id += '-' + parent.children.length;
      } else if (component.tagName === 'LABEL') {
        component.htmlFor += '[' + parent.children.length + ']';
      } else if (component.hasAttribute(Variables.paramsJSONSetText)) {
        component.textContent = textContent;
      }
    }
  }, {
    key: 'classNames',
    get: function get() {
      return {
        'radio': 'c-app-radio',
        'checkbox': 'c-app-checkbox'
      };
    }
  }, {
    key: 'defaultClassName',
    get: function get() {
      return 'c-app-input';
    }
  }]);

  return Input;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Select = exports.Select = function () {
  function Select() {
    _classCallCheck(this, Select);
  }

  _createClass(Select, null, [{
    key: 'createList',


    /*
    *   create <option></option> list
    */

    value: function createList(component, list) {

      component = Native.findAncestorByClass(component, this.className);

      if (component) {

        for (var key in list) {

          var option = document.createElement('option');

          option.setAttribute(Variables.paramsJSONForPost, key);
          option.textContent = list[key];

          component.appendChild(option);
        }
      } else {
        throw new SyntaxError('\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B, \u043F\u043E\u043B\u0435 select');
      }
    }

    /*
    *   selected active item
    */

  }, {
    key: 'addAttrToComponent',
    value: function addAttrToComponent(component, attr) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {

        for (var _iterator = component.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var option = _step.value;

          if (option.getAttribute(Variables.paramsJSONForPost) === attr) {
            option.setAttribute('selected', '');
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'className',
    get: function get() {
      return 'c-app-select';
    }
  }]);

  return Select;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextArea = exports.TextArea = function () {
  function TextArea() {
    _classCallCheck(this, TextArea);
  }

  _createClass(TextArea, null, [{
    key: 'setDefaultAttr',


    /*
     *   set default value
     */

    value: function setDefaultAttr(component, attr) {

      component = Native.findAncestorByClass(component, this.className);

      if (component) {
        ParseJSON.insertDataToAttrSetText(component, attr);
      } else {
        throw new SyntaxError('\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B, \u043F\u043E\u043B\u0435 textarea');
      }
    }

    /*
     *    set value
     */

  }, {
    key: 'addAttrToComponent',
    value: function addAttrToComponent(component, value) {
      component.textContent = value;
    }
  }, {
    key: 'className',
    get: function get() {
      return 'c-app-textarea';
    }
  }]);

  return TextArea;
}();