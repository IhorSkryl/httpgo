if (!Array.prototype.indexOf) {
// Array.prototype.indexOf
Array.prototype.indexOf = function indexOf(searchElement) {
	for (var array = this, index = 0, length = array.length; index < length; ++index) {
		if (array[index] === searchElement) {
			return index;
		}
	}

	return -1;
};

}
if (!Array.prototype.forEach) {
// Array.prototype.forEach
Array.prototype.forEach = function forEach(callback, scope) {
	for (var array = this, index = 0, length = array.length; index < length; ++index) {
		callback.call(scope || window, array[index], index, array);
	}
};

}
if (!Array.prototype.every) {
// Array.prototype.every
Array.prototype.every = function every(callback, scope) {
	for (var array = this, index = 0, length = array.length; index < length; ++index) {
		if (!callback.call(scope || window, array[index], index, array)) {
			break;
		}
	}

	return index === length;
};

}
if (!String.prototype.trim) {
// String.prototype.trim
String.prototype.trim = function trim() {
	return this.replace(/^\s+|\s+$/g, '');
};

}
if (!Array.prototype.reduce) {
// Array.prototype.reduce
Array.prototype.reduce = function reduce(callback, initialValue) {
	var array = this, previousValue = initialValue || 0;

	for (var index = 0, length = array.length; index < length; ++index) {
		previousValue = callback.call(window, previousValue, array[index], index, array);
	}

	return previousValue;
};

}
if (!Function.prototype.bind) {
// Function.prototype.bind
Function.prototype.bind = function bind(scope) {
	var
	callback = this,
	prepend = Array.prototype.slice.call(arguments, 1),
	Constructor = function () {},
	bound = function () {
		return callback.apply(
			this instanceof Constructor && scope ? this : scope,
			prepend.concat(Array.prototype.slice.call(arguments, 0))
		);
	};

	Constructor.prototype = bound.prototype = callback.prototype;

	return bound;
};

}
if (!Array.prototype.map) {
// Array.prototype.map
Array.prototype.map = function map(callback, scope) {
	for (var array = this, arrayB = [], index = 0, length = array.length, element; index < length; ++index) {
		element = array[index];

		arrayB.push(callback.call(scope || window, array[index], index, array));
	}

	return arrayB;
};

}
if (typeof Object !== "undefined" && !Object.getOwnPropertyNames) {
// Object.getOwnPropertyNames
Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	var buffer = [], key;

	for (key in object) {
		buffer.push(key);
	}

	return buffer;
};

}
if (typeof Object !== "undefined" && !Object.getPrototypeOf) {
// Object.getPrototypeOf
Object.getPrototypeOf = function getPrototypeOf(object) {
	return object && object.constructor && object.constructor.prototype || null;
};

}
if (typeof Object !== "undefined" && !Object.keys) {
// Object.keys
Object.keys = function keys(object) {
	var buffer = [], key;

	for (key in object) {
		if (Object.prototype.hasOwnProperty.call(object, key)) {
			buffer.push(key);
		}
	}

	return buffer;
};

}
if (typeof Array !== "undefined" && !Array.isArray) {
// Array.isArray
Array.isArray = function isArray(array) {
	return array && Object.prototype.toString.call(array) === '[object Array]';
};

}

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global) {
  function assert(e) {
    if (!e) throw new Error('Assertion failed');
  }
  // http://wiki.ecmascript.org/doku.php?id=harmony:observe

  // ECMAScript internal approximations
  function Type(o) {
    if (o === null) return 'null';
    switch (typeof o === 'undefined' ? 'undefined' : _typeof(o)) {
      case 'undefined':
        return 'undefined';
      case 'boolean':
        return 'boolean';
      case 'number':
        return 'number';
      case 'string':
        return 'string';
      default:
        return 'object';
    }
  }
  assert(Type(null) === 'null');
  assert(Type(assert) === 'object');

  function IsCallable(o) {
    return typeof o === 'function';
  }
  assert(!IsCallable(1));
  assert(IsCallable(assert));

  function ToUint32(x) {
    return x >>> 0;
  }
  assert(ToUint32(-1) === 0xffffffff);
  assert(ToUint32('abc') === 0);

  function SameValue(a, b) {
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    return a !== a && b !== b;
  }
  assert(SameValue(1, 1));
  assert(!SameValue(1, '1'));
  assert(SameValue(0, 0));
  assert(!SameValue(0, -0));
  assert(!SameValue(null, undefined));
  assert(!SameValue(null, NaN));
  assert(SameValue(NaN, NaN));

  function IsDataDescriptor(desc) {
    if (desc === undefined) return false;
    if (!('value' in desc) && !('writable' in desc)) return false;
    return true;
  }
  assert(IsDataDescriptor(Object.getOwnPropertyDescriptor({ x: 1 }, 'x')));

  function GetOwnProperty(o, p) {
    return Object.prototype.hasOwnProperty.call(o, p) ? o[p] : undefined;
  }
  assert(GetOwnProperty({ x: 1 }, 'x') === 1);
  assert(GetOwnProperty({}, 'x') === undefined);
  assert(GetOwnProperty({}, 'toString') === undefined);

  // ------------------------------------------------------------
  // Object.observe: New Internal Properties, Objects and Algorithms
  // ------------------------------------------------------------
  // http://wiki.ecmascript.org/doku.php?id=harmony:observe_internals

  // [[ObserverCallbacks]]
  var __ObserverCallbacks__ = []; // per event queue

  // [[NotifierPrototype]]
  var __NotifierPrototype__ = {};

  // [[NotifierPrototype]].notify
  __NotifierPrototype__.notify = function () {
    var changeRecord = arguments[0];
    var notifier = this;
    if (Type(notifier) !== 'object') throw new TypeError();
    if (!('[[Target]]' in notifier)) return;
    var type = changeRecord['type'];
    if (Type(type) !== 'string') throw new TypeError();
    var changeObservers = notifier['[[ChangeObservers]'];
    if (!changeObservers.length) return;
    var target = notifier['[[Target]]'];
    var newRecord = {};
    Object.defineProperty(newRecord, 'object', {
      value: target, writable: false, enumerable: true, configurable: false
    });
    for (var n in changeRecord) {
      if (n !== 'object') {
        var value = changeRecord[n];
        Object.defineProperty(newRecord, n, {
          value: value, writable: false, enumerable: true, configurable: false
        });
      }
    }
    Object.preventExtensions(newRecord);
    __EnqueueChangeRecord__(target, newRecord);
  };

  // [[NotifierPrototype]].performChange
  __NotifierPrototype__.performChange = function () {
    var changeType = arguments[0];
    var changeFn = arguments[1];
    var notifier = this;
    if (Type(notifier) !== 'object') throw new TypeError();
    if (!('[[Target]]' in notifier)) return;
    var target = notifier['[[Target]]'];
    if (Type(changeType) !== 'string') throw new TypeError();
    if (!IsCallable(changeFn)) throw new TypeError();
    __BeginChange__(target, changeType);
    try {
      var changeRecord = changeFn.call(undefined);
    } catch (e) {
      var error = e;
    }
    __EndChange__(target, changeType);
    if (error !== undefined) throw error;
    var changeObservers = notifier['[[ChangeObservers]]'];
    if (!changeObservers.length) return;
    var newRecord = {};
    Object.defineProperty(newRecord, 'object', {
      value: target, writable: false, enumerable: true, configurable: false
    });
    Object.defineProperty(newRecord, 'type', {
      value: changeType, writable: false, enumerable: true, configurable: false
    });
    for (var n in changeRecord) {
      if (n !== 'object' && n !== 'type') {
        var value = changeRecord[n];
        Object.defineProperty(newRecord, n, {
          value: value, writable: false, enumerable: true, configurable: false
        });
      }
    }
    Object.preventExtensions(newRecord);
    __EnqueueChangeRecord__(target, newRecord);
  };

  // [[GetNotifier]]
  function __GetNotifier__(o) {
    var notifier = o['[[Notifier]]'];
    if (notifier === undefined) {
      notifier = {};
      notifier.__proto__ = __NotifierPrototype__;
      notifier['[[Target]]'] = o;
      notifier['[[ChangeObservers]]'] = [];
      notifier['[[ActiveChanges]]'] = {};
      Object.defineProperty(o, '[[Notifier]]', {
        value: notifier, enumerable: false, configurable: true, writable: true
      });
    }
    return notifier;
  }

  // [[BeginChange]]
  function __BeginChange__(o, changeType) {
    var notifier = __GetNotifier__(o);
    var activeChanges = notifier['[[ActiveChanges]]'];
    var changeCount = activeChanges[changeType];
    if (changeCount === undefined) changeCount = 1;else changeCount = changeCount + 1;
    activeChanges[changeType] = changeCount;
  }

  // [[EndChange]]
  function __EndChange__(o, changeType) {
    var notifier = __GetNotifier__(o);
    var activeChanges = notifier['[[ActiveChanges]]'];
    var changeCount = activeChanges[changeType];
    assert(changeCount > 0);
    changeCount = changeCount - 1;
    activeChanges[changeType] = changeCount;
  }

  // [[ShouldDeliverToObserver]]
  function __ShouldDeliverToObserver__(activeChanges, acceptList, changeType) {
    var doesAccept = false;
    for (var i = 0; i < acceptList.length; ++i) {
      var accept = acceptList[i];
      if (activeChanges[accept] > 0) return false;
      if (accept === changeType) doesAccept = true;
    }
    return doesAccept;
  }

  // [[EnqueueChangeRecord]]
  function __EnqueueChangeRecord__(o, changeRecord) {
    var notifier = __GetNotifier__(o);
    var changeType = changeRecord['type'];
    var activeChanges = notifier['[[ActiveChanges]]'];
    var changeObservers = notifier['[[ChangeObservers]]'];
    for (var i = 0; i < changeObservers.length; ++i) {
      var observerRecord = changeObservers[i];
      var acceptList = observerRecord['accept'];
      var deliver = __ShouldDeliverToObserver__(activeChanges, acceptList, changeType);
      if (!deliver) continue;
      var observer = observerRecord['callback'];

      observer['[[PendingChangeRecords]]'] = observer['[[PendingChangeRecords]]'] || [];

      var pendingRecords = observer['[[PendingChangeRecords]]'];
      pendingRecords.push(changeRecord);
    }
  }

  // [[DeliverChangeRecords]]
  function __DeliverChangeRecords__(c) {
    var changeRecords = c['[[PendingChangeRecords]]'] || [];
    c['[[PendingChangeRecords]]'] = [];
    var array = [];
    var n = 0;
    for (var i = 0; i < changeRecords.length; ++i) {
      var record = changeRecords[i];
      Object.defineProperty(array, String(n), {
        value: record, writable: true, enumerable: true, configurable: true
      });
      ++n;
    }
    if (!array.length) return false;
    try {
      c.call(undefined, array);
    } catch (e) {}
    return true;
  }

  // [[DeliverAllChangeRecords]]
  function __DeliverAllChangeRecords__() {
    var observers = __ObserverCallbacks__;
    var anyWorkDone = false;
    for (var i = 0; i < observers.length; ++i) {
      var observer = observers[i];
      var result = __DeliverChangeRecords__(observer);
      if (result) anyWorkDone = true;
    }
    return anyWorkDone;
  }

  // [[CreateChangeRecord]]
  function __CreateChangeRecord__(type, object, name, oldDesc, newDesc) {
    var changeRecord = {};
    Object.defineProperty(changeRecord, 'type', {
      value: type, writable: false, enumerable: true, configurable: false
    });
    Object.defineProperty(changeRecord, 'object', {
      value: object, writable: false, enumerable: true, configurable: false
    });
    if (Type(name) === 'string') {
      Object.defineProperty(changeRecord, 'name', {
        value: name, writable: false, enumerable: true, configurable: false
      });
    }
    if (IsDataDescriptor(oldDesc)) {
      if (!IsDataDescriptor(newDesc) || !SameValue(oldDesc.value, newDesc.value)) {
        Object.defineProperty(changeRecord, 'oldValue', {
          value: oldDesc.value,
          writable: false, enumerable: true, configurable: false
        });
      }
    }
    Object.preventExtensions(changeRecord);
    return changeRecord;
  }

  // [[CreateSpliceChangeRecord]]
  function __CreateSpliceChangeRecord__(object, index, removed, addedCount) {
    var changeRecord = {};
    Object.defineProperty(changeRecord, 'type', {
      value: 'splice', writable: false, enumerable: true, configurable: false
    });
    Object.defineProperty(changeRecord, 'object', {
      value: object, writable: false, enumerable: true, configurable: false
    });
    Object.defineProperty(changeRecord, 'index', {
      value: index, writable: false, enumerable: true, configurable: false
    });
    Object.defineProperty(changeRecord, 'removed', {
      value: removed, writable: false, enumerable: true, configurable: false
    });
    Object.defineProperty(changeRecord, 'addedCount', {
      value: addedCount, writable: false, enumerable: true, configurable: false
    });
    Object.preventExtensions(changeRecord);
    return changeRecord;
  }

  // ------------------------------------------------------------
  // Object.observe: Public API Specification
  // ------------------------------------------------------------
  // http://wiki.ecmascript.org/doku.php?id=harmony:observe_public_api

  function defineAPI(o, name, fn) {
    if (!Object.getOwnPropertyDescriptor(o, name)) {
      Object.defineProperty(o, name, {
        value: fn, writable: true, enumerable: false, configurable: true
      });
    }
  }

  defineAPI(Object, 'observe', function observe(o, callback, accept) {
    if (Type(o) !== 'object') throw new TypeError();
    if (!IsCallable(callback)) throw new TypeError();
    if (Object.isFrozen(callback)) throw new TypeError();

    if (accept === undefined) {
      var acceptList = ['add', 'update', 'delete', 'setPrototype', 'reconfigure', 'preventExtensions'];
    } else {
      acceptList = [];
      if (Type(accept) !== 'object') throw new TypeError();
      var lenValue = accept.length;
      var len = ToUint32(lenValue);
      var nextIndex = 0;
      while (nextIndex < len) {
        var next = accept[nextIndex];
        var nextString = String(next);
        acceptList.push(nextString);
        nextIndex = nextIndex + 1;
      }
    }
    var notifier = __GetNotifier__(o);
    var changeObservers = notifier['[[ChangeObservers]]'];
    for (var i = 0; i < changeObservers.length; ++i) {
      var record = changeObservers[i];
      if (record.callback === callback) {
        record.accept = acceptList;
        return o;
      }
    }

    // Register for polling
    poly.watch(o, callback);

    var observerRecord = {};
    observerRecord.callback = callback;
    observerRecord.accept = acceptList;
    changeObservers.push(observerRecord);
    var observerCallbacks = __ObserverCallbacks__;
    if (observerCallbacks.indexOf(callback) !== -1) return o;
    observerCallbacks.push(callback);
    return o;
  });

  defineAPI(Object, 'unobserve', function unobserve(o, callback) {
    if (Type(o) !== 'object') throw new TypeError();
    if (!IsCallable(callback)) throw new TypeError();
    var notifier = __GetNotifier__(o);
    var changeObservers = notifier['[[ChangeObservers]]'];
    for (var i = 0; i < changeObservers.length; ++i) {
      var record = changeObservers[i];
      if (record.callback === callback) {
        changeObservers.splice(i, 1);

        // Unregister for polling
        poly.unwatch(o, callback);

        return o;
      }
    }
    return o;
  });

  defineAPI(Array, 'observe', function observe(o, callback) {
    return Object.observe(o, callback, ['add', 'update', 'delete', 'splice']);
  });
  defineAPI(Array, 'unobserve', function unobserve(o, callback) {
    return Object.unobserve(o, callback);
  });

  defineAPI(Object, 'deliverChangeRecords', function deliverChangeRecords(callback) {
    if (!IsCallable(callback)) throw new TypeError();

    // Slip in another sample
    poly.sample();

    while (__DeliverChangeRecords__(callback)) {
      continue;
    }return;
  });

  defineAPI(Object, 'getNotifier', function getNotifier(o) {
    if (Type(o) !== 'object') throw new TypeError();
    if (Object.isFrozen(o)) return null;
    return __GetNotifier__(o);
  });

  // ------------------------------------------------------------
  // Polyfill Hackery
  // ------------------------------------------------------------

  var poly = function () {
    var poly = {};

    var multimap = []; // Is a set of pairs <o, callback>
    var snapshots = []; // TODO: use a Map (polyfill) for snapshots

    poly.watch = function (o, callback) {
      multimap.push([o, callback]);
      for (var i = 0; i < snapshots.length; ++i) {
        if (snapshots[i][0] === o) return;
      }
      snapshots.push([o, makeSnapshot(o)]);
    };

    poly.unwatch = function (o, callback) {
      for (var i = 0; i < multimap.length; ++i) {
        if (multimap[i][0] === o && multimap[i][1] === callback) {
          multimap.splice(i, 1);
          break;
        }
      }
      for (i = 0; i < multimap.length; ++i) {
        if (multimap[i][0] === o) return;
      }
      for (i = 0; i < snapshots.length; ++i) {
        if (snapshots[i][0] === o) {
          snapshots.splice(i, 1);
          break;
        }
      }
    };

    function makeSnapshot(o) {
      var ss = { descriptors: {} };
      Object.getOwnPropertyNames(o).forEach(function (name) {
        ss.descriptors[name] = Object.getOwnPropertyDescriptor(o, name);
      });
      ss.isExtensible = Object.isExtensible(o);
      ss.prototype = Object.getPrototypeOf(o);
      return ss;
    }

    // TODO: 'splice' (via shimming intrinsics?)

    poly.sample = function () {
      snapshots.forEach(function (pair) {
        var o = pair[0];
        var oldSS = pair[1];
        var newSS = makeSnapshot(o); // TODO: Incrementally?
        pair[1] = newSS;

        Object.keys(oldSS.descriptors).forEach(function (name) {
          if (name === '[[Notifier]]') return;
          var oldDesc = GetOwnProperty(oldSS.descriptors, name);
          var newDesc = GetOwnProperty(newSS.descriptors, name);

          if (!newDesc) {
            var r = __CreateChangeRecord__('delete', o, name, oldDesc, newDesc);
            __EnqueueChangeRecord__(o, r);
            return;
          }

          if (['value', 'get', 'set', 'configurable', 'writable', 'enumerable'].every(function (p) {
            return oldDesc[p] === newDesc[p];
          })) {
            return;
          }
          var changeType = 'reconfigure';

          if (IsDataDescriptor(oldDesc) && IsDataDescriptor(newDesc) && !SameValue(oldDesc.value, newDesc.value)) {
            changeType = 'update';
          }

          r = __CreateChangeRecord__(changeType, o, name, oldDesc, newDesc);
          __EnqueueChangeRecord__(o, r);
        });
        Object.keys(newSS.descriptors).forEach(function (name) {
          if (name === '[[Notifier]]') return;
          var oldDesc = GetOwnProperty(oldSS.descriptors, name);
          var newDesc = GetOwnProperty(newSS.descriptors, name);

          if (!oldDesc) {
            var r = __CreateChangeRecord__('add', o, name, oldDesc, newDesc);
            __EnqueueChangeRecord__(o, r);
          }
        });

        if (oldSS.isExtensible !== newSS.isExtensible) {
          var r = __CreateChangeRecord__('preventExtensions', o);
          __EnqueueChangeRecord__(o, r);
        }

        if (oldSS.prototype !== newSS.prototype) {
          r = {};
          Object.defineProperty(r, 'type', {
            value: 'setPrototype',
            writable: false, enumerable: true, configurable: false
          });
          Object.defineProperty(r, 'object', {
            value: o,
            writable: false, enumerable: true, configurable: false
          });
          Object.defineProperty(r, 'oldValue', {
            value: oldSS.prototype,
            writable: false, enumerable: true, configurable: false
          });
          Object.preventExtensions(r);
          __EnqueueChangeRecord__(o, r);
        }
      });

      __DeliverAllChangeRecords__();
    };

    var POLL_FREQUENCY = 100; // ms
    setInterval(poly.sample, POLL_FREQUENCY);

    return poly;
  }();
})(window);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AttrParse = function () {
  function AttrParse(cls, tag, name, attr) {
    _classCallCheck(this, AttrParse);

    var prop = attr.trim();
    var hash = Virtual.hashCode(cls.name + prop).toString();
    var hashTmp = Virtual.hashCode(new Date.toString()).toString();

    var tmp = tag.replace(/\$\{([^\}]*)\}/g, function (_, str) {
      return '${' + str + '}';
    }) + ' n-hash=\'' + hash + ':' + hashTmp + '\'';

    this._prop = prop;
    this._cls = cls;
    this._name = name;
    this._hash = hash;
    this._hashTmp = hashTmp;
    this._tmp = tmp;
    this._oldVal = cls[name];
  }

  _createClass(AttrParse, [{
    key: 'changeTmp',
    value: function changeTmp(dom) {
      var curAttr = this.getAttribute(this._name);
      dom.setAttribute(this._name, curAttr.replace(this._oldVal, this.cls[this.prop]));
      this._oldVal = this.cls[this.prop];
    }
  }, {
    key: 'addData',
    value: function addData(data) {}
  }, {
    key: 'updateData',
    value: function updateData(data) {}
  }, {
    key: 'deleteData',
    value: function deleteData(data) {}
  }, {
    key: 'prop',
    get: function get() {
      return this._prop;
    }
  }, {
    key: 'cls',
    get: function get() {
      return this._cls;
    }
  }, {
    key: 'tmp',
    get: function get() {
      return this._tmp;
    }
  }, {
    key: 'hash',
    get: function get() {
      return this._hash;
    }
  }, {
    key: 'hashTmp',
    get: function get() {
      return this._hashTmp;
    }
  }], [{
    key: 'regex',
    get: function get() {
      return '\\<[^\\>\\<]+[\\s]+([\\w]+)=[\\"\']{1}[^\\"\']*\\$\\{([^\\}]*)\\}[^\\>]+';
    }
  }]);

  return AttrParse;
}();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ForParse = function () {
  function ForParse(cls, head, body) {
    var _this = this;

    _classCallCheck(this, ForParse);

    var hash = Virtual.hashCode(cls.name + head).toString();

    head = head.replace(/this.([\w]*)/, function (_, match) {
      _this._prop = match;
      return 'map.' + match;
    });

    var tmp = '${[\'\'].map(()=>{let str=\'\';' + head + '{str+=`' + body + '`};return str;})}';
    var hashTmp = Virtual.hashCode(tmp).toString();

    this._type = _typeof(cls[this.prop]);
    this._changeTmp = tmp;
    this._cls = cls;
    this._hash = hash;
    this._hashTmp = hashTmp;
    this._tmp = new Function('map', 'return `' + tmp + '`');
  }

  _createClass(ForParse, [{
    key: 'observe',
    value: function observe(changes) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = changes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var change = _step.value;

          this[change.type + 'Data'](change);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'addData',
    value: function addData(data) {
      var tmp = document.createElement('template');
      tmp.innerHTML = this._tmp.call(this.cls, _defineProperty({}, this.prop, [this.cls[this.prop][data.name]]));

      var methods = Virtual.parseMethods(tmp.content, this.cls);
      this.methods = this.methods.concat(methods);

      Virtual.eventListener(methods);
      this.parent.append(tmp.content);
    }
  }, {
    key: 'updateData',
    value: function updateData(data) {
      // debugger
      // if (data.)
    }
  }, {
    key: 'deleteData',
    value: function deleteData(data) {}
  }, {
    key: 'tmp',
    get: function get() {
      this._cloneTmp = this._tmp.call(this.cls, this.cls);
      return this._cloneTmp;
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    }
  }, {
    key: 'prop',
    get: function get() {
      return this._prop;
    }
  }, {
    key: 'cls',
    get: function get() {
      return this._cls;
    }
  }, {
    key: 'hash',
    get: function get() {
      return this._hash;
    }
  }, {
    key: 'hashTmp',
    get: function get() {
      return this._hashTmp;
    }
  }], [{
    key: 'regex',
    get: function get() {
      return '\\$\\{([ \\t]*[for]+\\s.+)\\}([^]*)\\$\\{[ \\t]*endfor[ \\t]*\\}';
    }
  }]);

  return ForParse;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PropParse = function () {
  function PropParse(cls, str) {
    _classCallCheck(this, PropParse);

    var prop = str.trim();
    var hash = Virtual.hashCode(cls.name + prop).toString();
    var tmp = '${' + prop + '}';
    var hashTmp = Virtual.hashCode(tmp).toString();

    this._changeTmp = tmp;
    this._prop = prop;
    this._cls = cls;
    this._hash = hash;
    this._hashTmp = hashTmp;
    this._tmp = new Function('', 'return `<property n-hash=\'' + hash + ':' + hashTmp + '\'>' + tmp + '</property>`');
  }

  _createClass(PropParse, [{
    key: 'changeTmp',
    value: function changeTmp(dom) {
      dom.innerHTML = new Function('', 'return `' + this._changeTmp + '`').call(this.cls);
    }
  }, {
    key: 'addData',
    value: function addData(data) {}
  }, {
    key: 'updateData',
    value: function updateData(data) {}
  }, {
    key: 'deleteData',
    value: function deleteData(data) {}
  }, {
    key: 'prop',
    get: function get() {
      return this._prop;
    }
  }, {
    key: 'cls',
    get: function get() {
      return this._cls;
    }
  }, {
    key: 'tmp',
    get: function get() {
      return this._tmp.call(this.cls, this.cls);
    }
  }, {
    key: 'hash',
    get: function get() {
      return this._hash;
    }
  }, {
    key: 'hashTmp',
    get: function get() {
      return this._hashTmp;
    }
  }], [{
    key: 'regex',
    get: function get() {
      return '\\>*\\$\\{([^\\}]*)\\}';
    }
  }]);

  return PropParse;
}();
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tmps = [];
var cache = {};

var isInnerBody = false;
var counterRequest = 0;

// HTML Escape helper utility
var util = function () {
  // Thanks to Andrea Giammarchi
  var reEscape = /[&<>'"]/g,
      reUnescape = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g,
      oEscape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    "'": '&#39;',
    '"': '&quot;'
  },
      oUnescape = {
    '&amp;': '&',
    '&#38;': '&',
    '&lt;': '<',
    '&#60;': '<',
    '&gt;': '>',
    '&#62;': '>',
    '&apos;': "'",
    '&#39;': "'",
    '&quot;': '"',
    '&#34;': '"'
  },
      fnEscape = function fnEscape(m) {
    return oEscape[m];
  },
      fnUnescape = function fnUnescape(m) {
    return oUnescape[m];
  },
      replace = String.prototype.replace;
  return (Object.freeze || Object)({
    escape: function escape(s) {
      return replace.call(s, reEscape, fnEscape);
    },
    unescape: function unescape(s) {
      return replace.call(s, reUnescape, fnUnescape);
    }
  });
}();

var Common = function () {
  function Common() {
    _classCallCheck(this, Common);
  }

  _createClass(Common, null, [{
    key: 'incrementCounterRequest',
    value: function incrementCounterRequest() {
      counterRequest++;
    }
  }, {
    key: 'decrementCounterRequest',
    value: function decrementCounterRequest(str) {
      counterRequest--;

      if (counterRequest === 0) {
        Parse.parsComponents(str);
      }
    }
  }, {
    key: 'includeComponents',


    /*
     *   include components
     */

    value: function includeComponents(components) {
      var _loop = function _loop(name) {
        if (!cache[name]) {
          if (components[name].startsWith('/')) {
            Native.request({
              processData: false,
              url: components[name],
              success: function success(response, url) {
                cache[url] = response;

                var _Script$hasAttr = Script.hasAttr(response, url, name),
                    _Script$hasAttr2 = _slicedToArray(_Script$hasAttr, 3),
                    tmp = _Script$hasAttr2[0],
                    script = _Script$hasAttr2[1],
                    isRequest = _Script$hasAttr2[2];

                if (!isRequest) {
                  Parse.parsComponents(tmp, script, name);
                }
              }
            });
          } else {
            cache[components[name]] = components[name];

            var _Script$hasAttr3 = Script.hasAttr(components[name], window.location.pathname, name),
                _Script$hasAttr4 = _slicedToArray(_Script$hasAttr3, 3),
                tmp = _Script$hasAttr4[0],
                script = _Script$hasAttr4[1],
                isRequest = _Script$hasAttr4[2];

            if (!isRequest) {
              Parse.parsComponents(tmp, script, name);
            }
          }
        } else {
          debugger;
          // tmp.innerHTML = cache[name];
          // tmp = (tmp.content) ? tmp.content : tmp;
          //
          // Script.hasAttr(tmp, components[name]);
          // Script.importScript(tmp);
          // Parse.parsComponents(tmp, name);
        }
      };

      for (var name in components) {
        _loop(name);
      }
    }

    /*
        get component by url
    */
    //
    // static getComponentByRoute(name, url) {
    //   if (isInnerBody) {
    //     const obj = {};
    //     obj[name] = url;
    //     Common.includeComponents(document.createElement('template'), obj);
    //   } else {
    //     tmps.push({name: name, url: url});
    //   }
    // }


  }, {
    key: 'components',
    get: function get() {
      return cache;
    }
  }]);

  return Common;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// observer.js
//

var isFunction = function isFunction(obj) {
  return typeof obj == 'function' || false;
};

var listeners = new Map();

var Observer = function () {
  function Observer() {
    _classCallCheck(this, Observer);
  }

  _createClass(Observer, null, [{
    key: 'addListener',
    value: function addListener(eventName, callback) {

      var listeners = this.listeners.get(eventName);
      var hashCallback = this.hashCode(callback);

      if (listeners && listeners.length) {
        for (var i = 0; i < listeners.length; i++) {
          if (listeners[i].hash === hashCallback) {
            listeners.splice(i, 1);
            break;
          }
        }
      }

      this.listeners.has(eventName) || this.listeners.set(eventName, []);
      this.listeners.get(eventName).push({ func: callback, hash: this.hashCode(callback) });
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventName, callback) {
      var listeners = this.listeners.get(eventName);
      var index = void 0;

      if (listeners && listeners.length) {
        var hashCallback = this.hashCode(callback);
        index = listeners.reduce(function (i, listener, index) {
          return isFunction(listener.func) && listener.hash === hashCallback ? i = index : i;
        }, -1);
        if (index > -1) {
          listeners.splice(index, 1);
          this.listeners.set(eventName, listeners.func);
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'emit',
    value: function emit(eventName) {
      var result = false;
      var listeners = this.listeners.get(eventName);

      if (listeners && listeners.length) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var listener = _step.value;

            var isRemove = listener.func.apply(listener, args);
            if (isRemove) {
              this.removeListener(eventName, listener.func);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        result = true;
      }

      return result;
    }
  }, {
    key: 'hashCode',
    value: function hashCode(str) {
      var hash = 0;
      str = typeof str === 'string' ? str : str.toString();

      if (str.length == 0) return hash;
      for (var i = 0; i < str.length; i++) {
        var char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32bit integer
      }
      return hash;
    }
  }, {
    key: 'listeners',
    get: function get() {
      return listeners;
    }
  }]);

  return Observer;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var classIncludes = {};
var scriptIncludes = [];

var Script = function () {
  function Script() {
    _classCallCheck(this, Script);
  }

  _createClass(Script, null, [{
    key: 'hasAttr',
    value: function hasAttr(tmp, url, name) {

      var regex = new RegExp('src="([^"]*)"', 'g');
      var requestScript = [];
      var isRequest = false;
      var match = void 0,
          script = void 0;

      url = url.replace(/[^/]+$/g, '');

      tmp = tmp.replace(/<script([^>]*)>([\s\S]*?)<\/script>/g, function (_, attr, func) {

        while (match = regex.exec(attr)) {
          if (match[0].startsWith('src')) {
            url = match[1].startsWith('/') ? match[1] : url + match[1];
            requestScript.push(url);

            return '';
          }
        }

        script = new Function('Native', func);

        return '';
      });

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = requestScript[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _url = _step.value;

          isRequest = true;
          System.import(_url).then(function (classes) {
            Parse.parsComponents(tmp, classes[Object.keys(classes)[0]], name, true);
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return [tmp, script, isRequest];
    }

    /*
    *   call func js
    */

  }, {
    key: 'callScripts',
    value: function callScripts() {
      try {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = scriptIncludes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var script = _step2.value;

            script.call(Native, Native);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } catch (e) {
        console.error('\n' + func + '\n\n', e);
      }
    }

    /*
    *   import script dynamically
    */

  }, {
    key: 'importScript',
    value: function importScript(component) {
      var scriptsComponent = [];

      component.querySelectorAll(Var.dynamicallyScript).forEach(function (dom) {
        scriptsComponent.push(dom.getAttribute('src'));
      });

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = scriptIncludes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var script = _step3.value;

          var normalized = System.normalizeSync(script);
          if (System.has(normalized) && scriptsComponent.includes(script)) {
            System.delete(normalized);
          }
          System.import(script);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }, {
    key: 'classIncludes',
    get: function get() {
      return classIncludes;
    }
  }, {
    key: 'scriptIncludes',
    get: function get() {
      return scriptIncludes;
    }
  }]);

  return Script;
}();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var html = function () {
  var cache = {};
  var regParse = new RegExp(ForParse.regex + '|' + AttrParse.regex + '|' + PropParse.regex, 'g');

  function generateTemplate(template) {
    var _this = this;

    var fn = cache[template];

    if (!fn) {
      // Replace ${expressions} (etc) with ${map.expressions}. //
      var sanitized = template.replace(regParse, function (all, head, body, attrName, attr, prop) {

        var parse = void 0;

        if (prop) {
          parse = new PropParse(_this.cls, prop);
        } else if (attrName && attr) {
          parse = new AttrParse(_this.cls, all, attrName, attr);
        } else if (head && body) {
          parse = new ForParse(_this.cls, head, body);
        }

        if (!_this.properties[parse.prop]) {
          _this.properties[parse.prop] = {
            tmp: new Map()
          };
        }

        _this.properties[parse.prop].hash = [parse.hash];
        _this.properties[parse.prop].tmp.set(parse.hashTmp, parse);

        return '<property n-hash="' + parse.hash + ':' + parse.hashTmp + '"></property>';
      });

      fn = new Function('', 'return `' + sanitized + '`');

      cache[template] = fn;
    }
    return fn;
  }

  return generateTemplate;
}();

var Virtual = function () {
  function Virtual(tmp, cls) {
    _classCallCheck(this, Virtual);

    this.tmp = tmp;
    this.cls = cls;
  }

  _createClass(Virtual, [{
    key: 'init',
    value: function init(parent, isClass) {
      var _this2 = this;

      this.parent = parent;

      if (isClass) {
        (function () {

          _this2.properties = {};

          _this2.cls = new _this2.cls(Native);
          _this2.tmp = html.call(_this2, _this2.tmp);

          var obj = {};
          var args = Object.getOwnPropertyNames(_this2.cls);

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            var _loop2 = function _loop2() {
              var key = _step.value;

              obj[key] = _this2.cls[key];

              if (!_this2.properties['this.' + key]) return 'continue';

              if (_typeof(_this2.cls[key]) === 'object') {

                var func = Array.isArray(_this2.cls[key]) ? Array : Object;
                // const func = this.cls[key];
                //
                // if (Array.isArray(this.cls[key])) {
                //   func.push = (e) => {
                //     debugger;
                //   };
                // }

                func.observe(_this2.cls[key], function (changes) {
                  console.log(changes);
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (var _iterator3 = _this2.properties[key].tmp[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                      var _step3$value = _slicedToArray(_step3.value, 2),
                          parse = _step3$value[1];

                      parse.observe(changes);
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }
                });
              }

              var prop = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(_this2.cls), key);

              Object.defineProperty(_this2.cls, key, {
                enumerable: true,
                configurable: true,
                get: function get() {
                  if (prop && prop.get) {
                    return prop.get.call(_this2.cls);
                  }
                  return obj[key];
                },
                set: function set(val) {
                  if (prop && prop.set) {
                    prop.set.call(_this2.cls, val);
                  } else if (prop && prop.get) {
                    console.error("don't writable", key);
                  }

                  obj[key] = prop && prop.get ? prop.get.call(_this2.cls) : val;

                  _this2.cls.render('this.' + key);
                }
              });
            };

            for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _ret3 = _loop2();

              if (_ret3 === 'continue') continue;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          _this2.cls.render = _this2.render.bind(_this2);

          var template = document.createElement('template');
          template.innerHTML = _this2.tmp.call(_this2.cls);

          _this2.methods = Virtual.parseMethods(template.content, _this2.cls);

          var _loop = function _loop(prop) {

            template.content.querySelectorAll('property[n-hash^="' + _this2.properties[prop].hash + ':"]').forEach(function (dom) {
              var hashTmp = dom.getAttribute('n-hash').replace(_this2.properties[prop].hash + ':', '');

              var parent = dom.parentElement;
              var parse = _this2.properties[prop].tmp.get(hashTmp);
              parse.parent = parent;

              var propTmp = document.createElement('template');
              propTmp.innerHTML = parse.tmp;

              parse.methods = Virtual.parseMethods(propTmp.content, _this2.cls);
              parent.replaceChild(propTmp.content, dom);
            });
          };

          for (var prop in _this2.properties) {
            _loop(prop);
          }

          _this2.parent.appendChild(template.content);
          Virtual.eventListener(_this2.methods);

          for (var key in _this2.properties) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = _this2.properties[key].tmp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _step2$value = _slicedToArray(_step2.value, 2),
                    parse = _step2$value[1];

                !parse.methods || Virtual.eventListener(parse.methods);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        })();
      } else if (this.cls) {
        this.parent.innerHTML = this.tmp;
        new this.cls(Native);
      } else {
        this.parent.innerHTML = this.tmp;
      }
    }
  }, {
    key: 'render',
    value: function render(key) {

      if (!this.properties[key]) return;

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this.properties[key].tmp[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _step4$value = _slicedToArray(_step4.value, 2),
              parse = _step4$value[1];

          Virtual.eventListener(parse.methods, false);
          parse.parent.innerHTML = parse.tmp;
          Virtual.eventListener(parse.methods);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }, {
    key: 'destructor',
    value: function destructor() {
      Virtual.eventListener(this.methods, false);
    }

    /*
    		event listener
    */

  }], [{
    key: 'eventListener',
    value: function eventListener(methods) {
      var isAddEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var funcListener = isAddEvent ? 'addEventListener' : 'removeEventListener';
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = methods[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var event = _step5.value;
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = event[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var _step6$value = _slicedToArray(_step6.value, 2),
                  key = _step6$value[0],
                  obj = _step6$value[1];

              obj.dom[funcListener](key, obj.func, false);
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    }

    /*
    		parse methods
    */

  }, {
    key: 'parseMethods',
    value: function parseMethods(el, cls) {

      var result = [];

      el.querySelectorAll('*').forEach(function (dom) {
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {

          for (var _iterator7 = dom.attributes[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var attr = _step7.value;


            if (attr.name.startsWith(Var.listener)) {
              var _ret4 = function () {

                var args = attr.value.split(',').map(function (str) {
                  return str.trim();
                });
                var funcName = args.shift();
                var func = void 0;

                if (cls && cls[funcName]) {
                  func = function func(e) {
                    var _cls$funcName;

                    (_cls$funcName = cls[funcName]).call.apply(_cls$funcName, [cls, e].concat(_toConsumableArray(args)));
                  };
                } else {
                  func = new Function('Native', attr.value).bind(Native);
                }

                result.push(new Map([[attr.name.replace(Var.listener, ''), { func: func, dom: dom }]]));
                return 'break';
              }();

              if (_ret4 === 'break') break;
            }
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      });

      return result;
    }
  }, {
    key: 'hashCode',
    value: function hashCode(str) {
      var hash = 0;
      str = typeof str === 'string' ? str : str.toString();

      if (str.length == 0) return hash;
      for (var i = 0; i < str.length; i++) {
        var char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32bit integer
      }
      return hash;
    }
  }]);

  return Virtual;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Native = exports.Native = function () {
  function Native() {
    _classCallCheck(this, Native);
  }

  _createClass(Native, null, [{
    key: 'init',
    value: function init(components) {
      Common.includeComponents(components);
    }

    /*
    *   register component
    */

  }, {
    key: 'component',
    value: function component() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (typeof url === 'string' && url.startsWith('/')) {
        var obj = {};
        obj[name] = url;
        Common.includeComponents(obj);
      } else {
        console.error('Invalid name component: ' + name);
      }
    }

    /*
    *   render property
    */

  }, {
    key: 'render',
    value: function render(cls, key) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Parse.virtuals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var virtual = _step.value;

          if (virtual.cls === cls) {
            virtual.render(key);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    /*
     *  get and post request with callback
     *
     *  beforeSend, complete, error, success, onprogress
     *
     */

  }, {
    key: 'request',
    value: function request() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { url: url },
          _ref$contentType = _ref.contentType,
          contentType = _ref$contentType === undefined ? 'multipart/form-data' : _ref$contentType,
          _ref$method = _ref.method,
          method = _ref$method === undefined ? 'GET' : _ref$method,
          _ref$processData = _ref.processData,
          processData = _ref$processData === undefined ? true : _ref$processData,
          _ref$url = _ref.url,
          url = _ref$url === undefined ? null : _ref$url,
          _ref$data = _ref.data,
          data = _ref$data === undefined ? null : _ref$data,
          _ref$beforeSend = _ref.beforeSend,
          beforeSend = _ref$beforeSend === undefined ? null : _ref$beforeSend,
          _ref$complete = _ref.complete,
          complete = _ref$complete === undefined ? null : _ref$complete,
          _ref$error = _ref.error,
          error = _ref$error === undefined ? null : _ref$error,
          _ref$success = _ref.success,
          success = _ref$success === undefined ? null : _ref$success,
          _ref$onprogress = _ref.onprogress,
          onprogress = _ref$onprogress === undefined ? null : _ref$onprogress;

      var body = ['\r\n'];

      var XHR = 'onload' in new XMLHttpRequest() ? XMLHttpRequest : XDomainRequest;
      var xhr = new XHR();

      if (data) {
        method = 'POST';
      }

      if (typeof onprogress === 'function') {
        xhr.onprogress = onprogress;
      }

      xhr.open(method, url, true);

      if (data) {
        var boundary = String(Math.random()).slice(2);
        var boundaryMiddle = '--' + boundary + '\r\n';
        var boundaryLast = '--' + boundary + '--\r\n';

        for (var key in data) {
          body.push('Content-Disposition: form-data; name="' + key + '"\r\n\r\n' + data[key] + '\r\n');
        }

        body = body.join(boundaryMiddle) + boundaryLast;
        xhr.setRequestHeader('Content-Type', contentType + '; boundary=' + boundary);
      }

      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

      if (typeof beforeSend === 'function') {
        beforeSend();
      }

      xhr.send(body);

      xhr.onload = function (response) {

        var responseText = response.currentTarget.responseText;

        if (processData) {
          try {
            responseText = JSON.parse(responseText);
          } catch (e) {
            console.error(e, responseText);
          }
        }

        if (typeof success === 'function') {
          success(responseText, url);
        }

        if (typeof complete === 'function') {
          complete();
        }
      };

      xhr.onerror = function (e) {
        if (typeof error === 'function') {
          error(e, url);
        } else {
          console.error('Error ' + e.target.status + ' occurred while receiving the document.');
        }
      };
    }
  }]);

  return Native;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var virtuals = [];
var cache = {};

var mainContent = void 0;

var Parse = function () {
  function Parse() {
    _classCallCheck(this, Parse);
  }

  _createClass(Parse, null, [{
    key: 'parsComponents',
    value: function parsComponents(tmp, script, name) {
      var isClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


      var cls = new Virtual(tmp, script);

      document.body.querySelectorAll(name).forEach(function (dom) {
        cls.init(dom, isClass);
        if (cls.cls && cls.cls.afterInit) {
          cls.cls.afterInit();
        }
      });

      virtuals.push(cls);

      // const str = Parse.getNClass(Common.components[tmp]);
      //
      // if (typeof str === 'string') {
      //   dom.innerHTML = str;
      // } else {
      //   for (let cls of str) {
      //     dom.innerHTML = cls.el;
      //   }
      // }
      //
      //
      //
      //
      // for (let tmp in Common.components) {
      //   component.querySelectorAll(`${ tmp }`).forEach(function(dom) {
      //     const str = Parse.getNClass(Common.components[tmp]);
      //
      //     if (typeof str === 'string') {
      //         dom.innerHTML = str;
      //     } else {
      //       for (let cls of str) {
      //         dom.innerHTML = cls.el;
      //       }
      //     }
      //
      //   });
      // }
    }

    /*
        get n-class
    */

  }, {
    key: 'getNClass',
    value: function getNClass(str) {
      var match = void 0;
      var result = [];
      var regex = new RegExp(Var.className + '="([^"]*)"', 'g');

      while (match = regex.exec(str)) {
        if (Script.classIncludes[match[1]]) {
          var cls = new Virtual(str, Script.classIncludes[match[1]]);
          result.push(cls);
          virtuals.push(cls);
        } else {
          console.error('Not found class: ' + Script.classIncludes[match[1]]);
        }
      }

      return result.length !== 0 ? result : str;
    }
  }, {
    key: 'virtuals',
    get: function get() {
      return virtuals;
    }
  }]);

  return Parse;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var listener = 'n\-on:';
var className = 'n\-class';
var nameMainContent = 'app\-main';
var scriptStandard = 'es6';

var documentIsReady = 'documentIsReady';

var Var = function () {
  function Var() {
    _classCallCheck(this, Var);
  }

  _createClass(Var, null, [{
    key: 'listener',


    /*
    *  Common
    */

    get: function get() {
      return listener;
    }
  }, {
    key: 'className',
    get: function get() {
      return className;
    }
  }, {
    key: 'nameMainContent',
    get: function get() {
      return nameMainContent;
    }
  }, {
    key: 'scriptStandard',
    get: function get() {
      return scriptStandard;
    }
  }, {
    key: 'documentIsReady',
    get: function get() {
      return documentIsReady;
    }
  }]);

  return Var;
}();