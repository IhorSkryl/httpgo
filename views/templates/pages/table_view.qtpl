All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

показ табличных данных.
{%  import (
    "github.com/ruslanBik4/httpgo/views/templates/forms"
    "database/sql"
    "log"
   "strings"
)
%}
{% func  ShowTable(tableName string, fields *forms.FieldsTable, rows *sql.Rows) %}
        {%  code
            columns, err := rows.Columns()
            if (err != nil) {
                log.Println(err)
            }

            var row [] interface {}

            // mfields может не соответствовать набору столбцов, потому завязываем на имеющиеся, прочие - игнорируем
            for _, fieldName := range columns {
                var field interface {}

                if fieldStruct := fields.FindField( fieldName ); fieldStruct != nil {
                    field = fieldStruct
                } else {
                    field = new(sql.NullString)
                }
                row = append( row, field )
            }
        %}
<link href="/tables.css" rel="stylesheet">

<table class="table table-striped table-bordered table-hover table-condensed">
    <thead>
        <tr>
            {%  for idx, fieldName := range columns %}
                <td>{% code
                        fieldStruct := fields.FindField( fieldName )
                        titleFull, titleLabel, _, _, _ := fieldStruct.GetColumnTitles()

                    %}
                    <a href="#{%d idx%}" title="{%s titleFull %}">{%s titleLabel %}</a>
                </td>
            {%  endfor %}
        </tr>
    </thead>
    <tbody>
        {% for rows.Next() %}
            {%  code
                err = rows.Scan(row...)

                if err != nil {
                    log.Println(err)
                    continue
                }

            %}
        <tr>
            {% for idx, rawField := range row %}
                {% code
                    var fieldStruct *forms.FieldStructure

                    switch rawField.(type) {
                        case *forms.FieldStructure:
                            fieldStruct = rawField.(*forms.FieldStructure)
                        default:
                            continue
                    }
                    key := fieldStruct.COLUMN_NAME
                    val := fieldStruct.Value
                    required, tablePrefix, titleLabel := "", "", ""
                %}
                {% if idx==0 %}
                    <td><a href="/admin/row/edit/?table={%s tableName %}&id={%s val %}" target="content">{%s val %}</a>
                    </td>
                {% else %}
                    <td>
                        {% if key=="parent_id" %}
                            {%= fieldStruct.RenderParentSelect(fields.Name, key, val, titleLabel, required) %}
                        {% elseif strings.HasPrefix(key, "id_") %}
                            {%= fieldStruct.RenderForeignSelect(tablePrefix, key, val, titleLabel, required) %}
                        {% elseif strings.HasPrefix(key, "setid_") %}
                            {%= fieldStruct.RenderMultiSelect(fields, tablePrefix, key, val, "См. ", required) %}
                        {%  else %}
                            {%s val %}
                        {% endif %}
                    </td>
                {% endif %}
            {%  endfor %}

        </tr>
        {%  endfor %}
    </tbody>

</table>

{% endfunc %}