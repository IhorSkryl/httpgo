All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

показ табличных данных.
{%  import (
    "github.com/ruslanBik4/httpgo/views/templates/forms"
    "database/sql"
    "log"
   "strings"
)
%}
{% func  ShowTable(tableName string, ns forms.FieldsTable, rows *sql.Rows) %}
        {%  code
            columns, err := rows.Columns()
            if (err != nil) {
                log.Println(err)
            }

            var row [] interface {}

            rowField := make([] *sql.NullString, len(columns))

            for idx, _ := range columns {

                rowField[idx] = new(sql.NullString)
                row = append( row, rowField[idx] )
            }
        %}
<link href="/tables.css" rel="stylesheet">

<table class="table table-striped table-bordered table-hover table-condensed">
    <thead>
        <tr>
            {%  for idx, _ := range columns %}
                <td>{% code
                        fieldStruct := ns.FindField( columns[idx] )
                        titleFull, titleLabel, _, _, _ := fieldStruct.GetColumnTitles()
                        if len(titleLabel) > 22 {
                            titleLabel = titleLabel[:22]
                            // titleLabel += "..."
                        }
                    %}
                    <a href="#" title="{%s titleFull %}">{%s titleLabel %}</a>
                </td>
            {%  endfor %}
        </tr>
    </thead>
    <tbody>
        {% for rows.Next() %}
            {%  code
                err = rows.Scan(row...)

                if err != nil {
                    log.Println(err)
                    continue
                }

                for idx, field := range rowField {
                    fieldStruct := ns.FindField( columns[idx] )
                    if field.Valid {
                        fieldStruct.Value = field.String
                    } else {
                         fieldStruct.Value = ""
                   }
                }
            %}
        <tr>
            {% for idx, field := range rowField %}
                {% if idx==0 %}
                    <td><a href="/admin/row/edit/?table={%s tableName %}&id={%s field.String %}" target="content">{%s field.String %}</a>
                    </td>
                {% else %}
                    <td>
                    {%  if field.Valid %}
                        {% code
                            fieldStruct := ns.FindField( columns[idx] )
                            key := columns[idx]
                            val := field.String
                            required, tablePrefix, titleLabel := "", "", ""
                        %}
                        {% if key=="parent_id" %}
                            {%= fieldStruct.RenderParentSelect(ns.Name, key, val, titleLabel, required) %}
                        {% elseif strings.HasPrefix(key, "id_") %}
                            {%= fieldStruct.RenderForeignSelect(tablePrefix, key, val, titleLabel, required) %}
                        {% elseif strings.HasPrefix(key, "setid_") %}
                            {%= fieldStruct.RenderMultiSelect(&ns, tablePrefix, key, val, "См. ", required) %}
                        {%  else %}
                            {%s field.String %}
                        {% endif %}
                    {% endif %}
                    </td>
                {% endif %}
            {%  endfor %}

        </tr>
        {%  endfor %}
    </tbody>

</table>

{% endfunc %}