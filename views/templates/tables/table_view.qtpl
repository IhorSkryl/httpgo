All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

показ табличных данных.
{%  import (
    "github.com/ruslanBik4/httpgo/views/templates/forms"
    "database/sql"
    "log"
    "fmt"
   "strings"
   "strconv"
)
%}
{% func (query *QueryStruct) renderHeadTables() %}
<link href="/tables.css" rel="stylesheet">
<!--table class="table table-striped table-bordered table-hover table-condensed" -->
<div style="height: 70vh; width: 100%; overflow:auto;">
<div style='margin:0;' class='thead table row-fluid' >
    <div class='tr' style='$style_div' >
        {% code
            var figure, filterFields string
        %}
            {% for idx, fieldName := range query.columns %}
                {% code
                        fieldStruct := query.fields[idx]
                        titleFull, titleLabel := fieldStruct.COLUMN_COMMENT, fieldStruct.COLUMN_COMMENT

                        if len(titleFull) > 50 {

                            titleLabel = titleFull[:strings.LastIndex(titleFull[:51], " ")] + "..."
                        }

                        if titleLabel == "" {
                            titleLabel = fieldName
                        }
                        if fieldStruct.InputType == "" {
                            fieldStruct.InputType = forms.StyleInput(fieldStruct.DATA_TYPE)
                        }
                        width := forms.GetLengthFromType(fieldStruct.InputType)
                        fieldStruct.CSSStyle = fmt.Sprintf("min-width:%dpx;", width)
                        query.widthTable += width
                        filterFields     += fmt.Sprintf(`<div title="%s" class="th" style="%s"></div>`, fieldName, fieldStruct.CSSStyle )
                %}
                {% comment %} Здесь объединяем колонки в группы {% endcomment %}
                {% if figure != fieldStruct.Figure %}
                    {% if figure > "" %}
                        </div>
                    {% endif %}
                    {%code
                        figure = fieldStruct.Figure
                    %}
                    {% if figure > "" %}
                            <div class='td' style="border: 1px inset gray;">
                                <p class='name_group' style="border-bottom: 1px outset gray; padding-top: 1px;"> {%s figure %}</p>
                    {% endif %}
                {% endif %}
                 <div title="{%s fieldName %}" class="th" style="{%s fieldStruct.CSSStyle %}">
                   <a href="{%s query.Href %}/?order={%s fieldName %}" title="{%s titleFull %}">{%s  titleLabel %}
                    <span class="glyphicon glyphicon-sort-by-attributes-alt"></span>
                   </a>
                </div>
            {% endfor %}
            {% if figure > "" %}
                </div>
            {% endif %}
    </div>
    <form name='fFilter' id='fFilter' class='form-simple tr thead' role='form' action='{%s query.Href %}/?filter'  method='post'  target='content' style='width:auto;$style' onsubmit='return SaveObject( this );' enctype='multipart/form-data' title='$title' oninput='return FormIsModified( event, this);'
    onabort="alert('fFilter');">
        <input name="{%s query.Tables[0].Name %}" hidden />
        {%s= filterFields %}
    </form>
</div>
{% endfunc %}
{% func (query *QueryStruct) RenderTable() %}
        {%  code
            if err := query.beforeRender(); err != nil {
                return
            }
        %}
        {%= query.renderHeadTables() %}
        {%= query.renderBodyTables() %}
{% endfunc %}
{% func  ShowTable(tableName string, fields forms.FieldsTable, rows *sql.Rows) %}
        {%  code
            var query QueryStruct
            query.Rows = rows
            query.Href = "/admin/table/" + tableName
            query.HrefEdit = "/admin/row/edit/?table=" + tableName + "&id="
            query.Tables = append(query.Tables, &fields)

            if err := query.beforeRender(); err != nil {
                return
            }
        %}
        {%= query.renderHeadTables() %}
        {%= query.renderBodyTables() %}
{% endfunc %}
{% func (query *QueryStruct) renderBodyTables() %}
<div id="table_body" style='width: {%d query.widthTable %}px;' class='panel-body scroll-pane'>
        {% for query.Rows.Next() %}
            {%  code
                if err := query.Rows.Scan(query.row...); err != nil {
                    log.Println(err)
                    continue
                }

                required, tablePrefix, titleLabel := "", "", ""
            %}
        <div class='tr' style='$style_div'>
            {% for idx, rawField := range query.row %}
                {% code
                    var fieldStruct *forms.FieldStructure

                    switch rawField.(type) {
                        case *forms.FieldStructure:
                            fieldStruct = rawField.(*forms.FieldStructure)
                        default:
                            fieldStruct = query.fields[idx]
                    }
                    key := fieldStruct.COLUMN_NAME
                    val := fieldStruct.Value
                    fields := fieldStruct.Table
                    nameInput := tablePrefix + key
                    dataJson := ""
                     if dataJson > "" {
                         dataJson = fmt.Sprintf(`data-names="{% s}"`, dataJson )
                     }
                   events := ""
                    for name, funcName := range fieldStruct.Events {
                        events += fmt.Sprintf(`%s="return %s;"`, name, funcName)
                    }
                %}
                {% if idx==0 %}
                    <div name="{%s key %}" class="td" style="{%s fieldStruct.CSSStyle %}">
                        <a href="{%s= query.HrefEdit %}{%s val %}" target="content">{%s val %}</a>
                    </div>
                    {%code
                        tablePrefix = fields.Name
                        fields.ID, _ = strconv.Atoi(val)
                    %}
                {% else %}
                {% comment %}
                // TODO: сменить показ селектов от формы на табличные виды
                {% endcomment %}
                    <div name="{%s key %}" class="td {%s= required %} field-{%s nameInput %} {%s fieldStruct.CSSClass %}"
                         style="{%s fieldStruct.CSSStyle %};margin:auto; height:auto;">
                        {% if key=="parent_id" %}
                            {%= fieldStruct.RenderParentSelect(fields.Name, key, val, titleLabel, required, events, dataJson) %}
                        {% elseif strings.HasPrefix(key, "id_") %}
                            {%= fieldStruct.RenderForeignSelect(tablePrefix, key, val, titleLabel, required, events, dataJson) %}
                        {% elseif strings.HasPrefix(key, "setid_") || strings.HasPrefix(key, "nodeid_") %}
                            {%= fieldStruct.RenderMultiSelect(fields, tablePrefix, key, val, "См. ", required) %}
                        {% elseif strings.HasPrefix(key, "tableid_") %}
                            {%= fieldStruct.RenderTable(fields, tablePrefix, key, val, "Табл", required) %}
                        {%  else %}
                            {% switch fieldStruct.DATA_TYPE %}
                            {% case "tinyint" %}
                                    {% code
                                        checked := ""
                                        if (val == "1") {
                                            checked = "checked"
                                        }
                                    %}
                                    {%= forms.RenderCheckBox(nameInput, "1", titleLabel, 1, checked, required, events, dataJson) %}
                            {% case "enum" %}
                                {%code t := fieldStruct.RenderEnum(nameInput, val, required, events, dataJson) %}
                                {%s= t %}
                            {% case "set" %}
                                {%code t := fieldStruct.RenderSet(nameInput, val, required, events, dataJson) %}
                                {%s= t %}
                            {% case "text" %}
                                <textarea id="{%s key %}" name="{%s nameInput %}" class="controls"  {%s= events %} {%s= dataJson %}>
                                    {%s= val %}
                                </textarea>
                            {% case "blob" %}
                                <image src="/images/expand_hover.png" />
                            {% default %}
                                {% if fieldStruct.LinkTD > "" %}
                                 <a href="{%s= fieldStruct.LinkTD %}?id={%d fields.ID %}" target="_blank" class="referal"> !! </a>
                                 {% endif %}
                                {%s val %}
                            {% endswitch %}
                        {% endif %}
                    </div>
                {% endif %}
            {%  endfor %}
        </div>
        {%  endfor %}
    </div>
</div>
<!--/table-->

{% endfunc %}