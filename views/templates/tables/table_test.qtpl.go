// This file is automatically generated by qtc from "table_test.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line views/templates/tables/table_test.qtpl:1
package tables

//line views/templates/tables/table_test.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/templates/tables/table_test.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/templates/tables/table_test.qtpl:1
func StreamTableTesting(qw422016 *qt422016.Writer) {
	//line views/templates/tables/table_test.qtpl:1
	qw422016.N().S(`
<!DOCTYPE html>
<html lang="">
<head>

    <script  src="/webcomponents.js"></script>

</head>
<body>
<link rel="import" href="/components/paper-datatable/paper-datatable-card.html">
<link rel="import" href="/components/paper-datatable/paper-datatable.html">
<template is="dom-bind" id="app">
<paper-datatable data="{{data}}" >
	<paper-datatable-column header="ID пользователя" property="id" type="Number" sortable></paper-datatable-column>
	<paper-datatable-column header="Че жрет" property="title" type="String"></paper-datatable-column>
	<paper-datatable-column header="Сколько каллорий" property="calories" type="Number"></paper-datatable-column>
	<paper-datatable-column header="Fat" property="fat" type="Number"></paper-datatable-column>
	<paper-datatable-column header="Carbs" property="carbs" type="Number"></paper-datatable-column>
	<paper-datatable-column header="Protein" property="protein" type="Number"></paper-datatable-column>
	<paper-datatable-column header="Sodium" property="sodium" type="Number"></paper-datatable-column>
	<paper-datatable-column header="calcium" property="calcium" type="Number"></paper-datatable-column>
	<paper-datatable-column header="iron" property="iron" type="Array"></paper-datatable-column>
</paper-datatable>

<script>
			var app = document.querySelector('#app');
			app.data = [
				{id: 0, title: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4, sodium: 87, calcium:.14, iron: ['Юридическое лицо','Индивидуальный предприниматель','Частное лицо']},
				{id: 1, title: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4.3, sodium: 129, calcium:.08, iron: ['Устав','Приказ генерального директора','Приказ директора','Доверенность']},
				{id: 2, title: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6, sodium: 337, calcium:.06, iron: .07},
				{id: 3, title: 'Cupcake', calories: 305, fat: 3.7, carbs: 67, protein: 4.3, sodium: 413, calcium:.03, iron: .08},
				{id: 4, title: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 3.9, sodium: 327, calcium:.07, iron: .16},
				{id: 5, title: 'Jelly bean', calories: 373, fat: 0, carbs: 94, protein: 0, sodium: 50, calcium:0, iron: 0}
			];
			app.toFixedOne = function(value){
				return value.toFixed(1);
			};
			app.toPercentage = function(value){
				return Math.round(value * 10000)/100 + '%';
			};
		</script>
</body>
</html>

`)
//line views/templates/tables/table_test.qtpl:45
}

//line views/templates/tables/table_test.qtpl:45
func WriteTableTesting(qq422016 qtio422016.Writer) {
	//line views/templates/tables/table_test.qtpl:45
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line views/templates/tables/table_test.qtpl:45
	StreamTableTesting(qw422016)
	//line views/templates/tables/table_test.qtpl:45
	qt422016.ReleaseWriter(qw422016)
//line views/templates/tables/table_test.qtpl:45
}

//line views/templates/tables/table_test.qtpl:45
func TableTesting() string {
	//line views/templates/tables/table_test.qtpl:45
	qb422016 := qt422016.AcquireByteBuffer()
	//line views/templates/tables/table_test.qtpl:45
	WriteTableTesting(qb422016)
	//line views/templates/tables/table_test.qtpl:45
	qs422016 := string(qb422016.B)
	//line views/templates/tables/table_test.qtpl:45
	qt422016.ReleaseByteBuffer(qb422016)
	//line views/templates/tables/table_test.qtpl:45
	return qs422016
//line views/templates/tables/table_test.qtpl:45
}
