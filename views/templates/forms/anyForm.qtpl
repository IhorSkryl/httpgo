All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

{% import (
    "github.com/ruslanBik4/httpgo/models/db"
    "strings"
    "strconv"
    "regexp"
    "log"
    "fmt"
) %}
{%  code
type FieldStructure struct {
    COLUMN_NAME   string
    DATA_TYPE string
    COLUMN_DEFAULT string
    IS_NULLABLE string
    CHARACTER_SET_NAME string
    COLUMN_COMMENT string
    COLUMN_TYPE string
    CHARACTER_MAXIMUM_LENGTH int
    Value string
    IsHidden bool
    CSSClass  string
    TableName string
    Events map[string] string
}
type FieldsTable struct {
    Name string
    IsDadata bool
    Rows [] FieldStructure
    Hiddens map[string] string
}
%}
{% func (field *FieldStructure) renderParentSelect(nameTable, key, val, titleLabel, required  string) %}
    <label for="{%s key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s key %}" class="form-control" {%s required %} {%s val %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
        <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {% code
            if nameTable == "" {
                nameTable = field.TableName
            }
        %}
        {%= getOptions("id_" + nameTable, field.Value) %}
    </select>
{% endfunc %}
{% func getOptions(key string, value string) %}
        {% code
            var listNs db.FieldsTable

            tableName := key[3:]
            err := listNs.GetColumnsProp(tableName)
        %}
        {%  if err == nil %}
        {%  code

            name := ""
            for _, list := range listNs.Rows {
                switch list.COLUMN_NAME {
                    case "name":
                        name = "name"
                        break
                    case "title":
                        name = "title"
                    break
                    case "fullname":
                        name = "fullname"
                    break
                }
            }
        %}
            {% if name > "" %}
            {% code
                rows := db.DoQuery("select id, " + name + " from " + tableName)
                defer rows.Close()
                selected := ""
                valueID, _ := strconv.Atoi(value)
            %}
            {%  for rows.Next() %}
                {%  code
                    var id int
                    var name string

                    if err := rows.Scan(&id, &name); err != nil {
                        log.Println(err)
                        continue
                    }
                    if valueID == id {
                        selected = "selected"
                    } else {
                        selected = ""
                    }
                %}
                    <option value='{%d id %}' {%s selected %}>{%s name %}</option>
            {% endfor %}
            {% endif %}
    {%  else %}
        <option value='-1' >No found</option>
    {% endif %}
{% endfunc %}
{% func (ns *FieldsTable) ShowAnyForm(Action, Title string) %}
<form class="row-fluid" target="content" action="{%s Action %}" method="post" class="form-horizontal" onsubmit="return saveForm(this, afterSaveAnyForm);" >
    <h2 class="form-signin-heading">{%s Title %}</h2>
    {% if ns.Name > "" %}
        <input hidden name="table" value="{%s ns.Name %}" >
    {% endif %}
    {% for idx, field := range ns.Rows %}

        {% code
            key := field.COLUMN_NAME
            titleLabel := field.COLUMN_COMMENT
            val := field.Value
            tableName := ""
            required := ""

            if field.IS_NULLABLE=="NO" {
                required = "required"
            }
            if titleLabel=="" {
                titleLabel = key
            }
            if val > "" {
                val = "value=" + val + ""
            } else if field.COLUMN_DEFAULT > "" {
                val = "value=" + field.COLUMN_DEFAULT + ""
            }
            if field.TableName > "" {
                tableName = field.TableName + ":"
            }
            events := ""
            for name, funcName := range field.Events {
                events += fmt.Sprintf("%s=\"return %s;\"", name, funcName)
            }
        %}

        {% if (val > "") && ( (key=="id") || field.IsHidden ) %}
            <input hidden name="{%s key %}" {%s val %}>
            {% continue %}
        {% elseif key=="id"%}
            {% continue %}
        {%  endif %}

        <div id="divField{%d idx %}" class="form-group field-{%s key %} {%s required %} {%s field.CSSClass %}"
                    {% if field.IsHidden %}style="display:none"{% endif %}>
        {% if key=="parent_id" %}
            {%= field.renderParentSelect(ns.Name, key, val, titleLabel, required) %}
        {% elseif strings.HasPrefix(key, "id_") %}
            <label for="{%s key %}">{%s titleLabel %}</label>
            <select id="{%s key %}" name="{%s tableName+key %}" class="form-control" {%s required %} {%s val %}>
                {% if field.IS_NULLABLE=="YES" && val=="" %}
                    <option value="" selected>Значение можно не указывать</option>
                {% else %}
                    <option disabled >Выберите значение из списка</option>
                {% endif %}
                {%= getOptions(key, field.Value) %}
            </select>
        {% else %}

                {% switch field.DATA_TYPE %}
                {% case "tinyint" %}
                        {% code
                            checked := ""
                            if (field.Value > "") {
                                checked = "checked"
                            }
                        %}
                        {%= renderCheckBox(tableName+key, titleLabel, 1, checked) %}
                {% case "enum" %}
                    <label for="{%s key %}">{%s titleLabel %}:</label>
                    {%= field.renderEnum(tableName+key, required) %}
                {% case "set" %}
                    <label for="{%s key %}">{%s titleLabel %}:</label>
                    {%= field.renderSet(tableName+key, required) %}
                {% default %}
                <label for="{%s key %}">{%s titleLabel %}</label>
                <input id="{%s key %}" name="{%s tableName+key %}" class="form-control" placeholder="{%s field.COLUMN_COMMENT %}"
                    {%s required %} {%s val %} {%s= events %}

                    {%if field.DATA_TYPE=="int" || field.DATA_TYPE=="double" %}
                        type="number"
                           {% if strings.Contains(field.COLUMN_TYPE, "unsigned") %}min="0"{% endif %}
                    {% elseif strings.Contains(key, "email") %}
                        type="email"
                    {% else %}
                        type="text"
                           {%if field.CHARACTER_MAXIMUM_LENGTH>0 %}size="{%d field.CHARACTER_MAXIMUM_LENGTH %}"{% endif %}
                    {% endif %}
                />
                {% endswitch %}

        {% endif %}
        </div>
    {% endfor %}
    <button class="btn btn-large btn-primary" type="submit">Сохранить</button>
</form>
{% if ns.IsDadata %}
<head>
    <link href="https://cdn.jsdelivr.net/jquery.suggestions/16.8/css/suggestions.css" type="text/css" rel="stylesheet" />
    <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery.suggestions/16.8/js/jquery.suggestions.min.js"></script>
</head>
{% endif %}
{% endfunc %}
{% func (field *FieldStructure) renderSet(key, required string) %}
    {% code
        enumValidator := regexp.MustCompile(`(?:'([^,]+)',?)`)
        fields := enumValidator.FindAllStringSubmatch(field.COLUMN_TYPE, -1)
        checked := ""
    %}
    {% for idx, title := range fields %}
        {% code
            enumVal := title[len(title)-1]
            if (field.Value > "") && (strings.Index(field.Value, enumVal) > -1) || (field.Value == "") && (enumVal == field.COLUMN_DEFAULT) {
                checked = "checked"
            } else {
                checked = ""
            }
        %}
        {%= renderCheckBox(key + "[]", enumVal, idx, checked) %}
    {%  endfor %}
{% endfunc %}
{% func renderCheckBox(key, title string, idx int, checked string) %}
    <label for="{%s key %}{%d idx %}">
        <input type="checkbox" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s title %}" {%s checked %}/>
        {%s title %}
    </label>
{% endfunc %}
{% func (field *FieldStructure) renderEnum(key, required string) %}
    {% code
        enumValidator := regexp.MustCompile(`'([^']+)'`)
        fields := enumValidator.FindAllStringSubmatch(field.COLUMN_TYPE, -1)
        renderSelect := len(fields) > 3
    %}

    {% if renderSelect %}
        <select id="{%s key %}" name="{%s key %}" class="form-control" {%s required %} >
    {% endif %}
    {% for idx, title := range fields %}
        {% code
            enumVal := title[len(title)-1]
            checked, selected  := "", ""
            if (field.Value > "") && (field.Value == enumVal) || (field.Value == "") && (enumVal == field.COLUMN_DEFAULT) {
              checked, selected = "checked", "selected"
            }
        %}
        {% if renderSelect %}
            <option value='{%s enumVal %}' {%s selected %}>{%s enumVal %}</option>
        {% else %}
            {%= renderRadioBox(key, enumVal, idx, checked) %}
        {% endif %}
    {%  endfor %}
    {% if renderSelect %}
        </select>
    {% endif %}
{% endfunc %}
{% func renderRadioBox(key, title string, idx int, checked string) %}
    <label for="{%s key %}{%d idx  %}">
        <input type="radio" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s title %}" {%s checked %}/>
        {%s title %}
    </label>
{% endfunc %}
{% func (fields *FieldsTable) PutDataFrom(ns db.FieldsTable) %}
{% code
   for _, field := range ns.Rows {
        fieldStrc := &FieldStructure{
            COLUMN_NAME: field.COLUMN_NAME,
            DATA_TYPE  : field.DATA_TYPE,
            IS_NULLABLE: field.IS_NULLABLE,
            COLUMN_TYPE: field.COLUMN_TYPE,
            Events     : make(map[string] string, 0),
        }
        if field.CHARACTER_SET_NAME.Valid {
            fieldStrc.CHARACTER_SET_NAME = field.CHARACTER_SET_NAME.String
        }
        if field.COLUMN_COMMENT.Valid {
            fieldStrc.COLUMN_COMMENT = field.COLUMN_COMMENT.String
        }
        if field.CHARACTER_MAXIMUM_LENGTH.Valid {
            fieldStrc.CHARACTER_MAXIMUM_LENGTH = int(field.CHARACTER_MAXIMUM_LENGTH.Int64)
        }
        if field.COLUMN_DEFAULT.Valid {
            fieldStrc.COLUMN_DEFAULT = field.COLUMN_DEFAULT.String
        }
        fieldStrc.IsHidden = false
        fields.Rows = append(fields.Rows,*fieldStrc)
    }
%}
{% endfunc %}