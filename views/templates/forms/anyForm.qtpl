{% import (
    "strings"
    "strconv"
    "log"
    "github.com/ruslanBik4/httpgo/models/db"
    "fmt"
) %}
Здесь рисуем элементы ввода для полей, обозначающие связи таблицы многие-к-многим
При этом имя поля однозначно определяет тип связи и таблицу, с которой связываемся
{% func (field *FieldStructure) RenderMultiSelect(ns *FieldsTable, tablePrefix, key, val, titleLabel, required  string) %}
    <div class="dropdown">
        <a class="dropdown-toggle" role="button" onclick="$(this).parent().toggleClass('open')" >
            <span>{%s titleLabel %}</span>
            <b class="caret"></b>
        </a>
        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
            {%code field.getMultiSelect(ns) %}
            {%s= field.Html  %}
        </ul>
    </div>
{% endfunc %}
{% func (field *FieldStructure) RenderSelect(tablePrefix, key, val, titleLabel, required  string) %}
    <label class="control-label" for="{%s tablePrefix+key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s tablePrefix+key %}" class="controls" {%s required %} {%s val %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
            <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {%= field.getOptions(key[3:], field.Value, "option", "") %}
    </select>
{% endfunc %}

{% func (field *FieldStructure) renderParentSelect(nameTable, key, val, titleLabel, required  string) %}
    <label class="control-label" for="{%s key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s key %}" class="controls" {%s required %} {%s val %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
            <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {% code
            if nameTable == "" {
                nameTable = field.TableName
            }
        %}
        {%= field.getOptions(nameTable, field.Value, "option", "") %}
    </select>
{% endfunc %}
{% func (field *FieldStructure) getOptions(tableName, value, mode, where string) %}
            {% code
                name := db.GetParentFieldName(tableName)
                if name == "" {
                    return
                }
                rows, err := db.DoSelect("select id, " + name + " from " + tableName + where)
                if err != nil {
                    log.Println(err)
                    return
                }
                defer rows.Close()
                selected := ""
                idx := 0
                valueID, _ := strconv.Atoi(value)
            %}
            {%  for rows.Next() %}
                {%  code
                    var id int
                    var title, checked string

                    if err := rows.Scan(&id, &title); err != nil {
                        log.Println(err)
                        continue
                    }
                    if valueID == id {
                        selected, checked = "selected", "checked"
                    } else {
                        selected, checked = "", ""
                    }
                    idx++
                %}
                {% if mode=="option" %}
                    <option value='{%d id %}' {%s selected %}>{%s title %}</option>
                {% else %}
                    <li role='presentation'>
                        {%= renderCheckBox(field.COLUMN_NAME, title, idx, checked, "events", "") %}
                    </li>
                {% endif %}
            {% endfor %}
{% endfunc %}
{% func (ns *FieldsTable) ShowAnyForm(Action, Title string) %}
<form name="f{%s ns.Name %}" role='form' class="form-horizontal row-fluid" target="content" action="{%s Action %}" method="post"
      onsubmit="return saveForm(this, afterSaveAnyForm);" >
    <h2 class="form-signin-heading">{%s Title %}</h2>
    {% if ns.Name > "" %}
        <input type="hidden" name="table" value="{%s ns.Name %}" >
    {% endif %}
    {% for idx, field := range ns.Rows %}

        {% code
            key := field.COLUMN_NAME
            titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
            val := field.Value
            tablePrefix := ""
            required := ""

            if field.IS_NULLABLE=="NO" {
                required = "required"
            }

            if val > "" {
                val = "value=" + val + ""
            } else if field.COLUMN_DEFAULT > "" {
                val = "value=" + field.COLUMN_DEFAULT + ""
            }
            if dataJson > "" {
                dataJson = fmt.Sprintf("data-names='{% s}'", dataJson )
            }
            if field.TableName > "" {
                tablePrefix = field.TableName + ":"
            }
            nameInput := tablePrefix + key
            events := ""
            for name, funcName := range field.Events {
                events += fmt.Sprintf("%s=\"return %s;\"", name, funcName)
            }
        %}

        {% if (val > "") && ( (key=="id") || field.IsHidden ) %}
            <input type="hidden" name="{%s key %}" {%s val %}>
            {% continue %}
        {% elseif key=="id"%}
            {% continue %}
        {%  endif %}

        <div id="divField{%d idx %}" class="control-group field-{%s key %} {%s required %} {%s field.CSSClass %}"
                    {% if field.IsHidden %}style="display:none"{% endif %}
             data-toggle="tooltip" title="{%s= titleFull %}"
        >
        {% if key=="parent_id" %}
            {%= field.renderParentSelect(ns.Name, key, val, titleLabel, required) %}
        {% elseif strings.HasPrefix(key, "id_") %}
            {%= field.RenderSelect(tablePrefix, key, val, titleLabel, required) %}
        {% elseif strings.HasPrefix(key, "setid_") %}
            {%= field.RenderMultiSelect(ns, tablePrefix, key, val, titleLabel, required) %}
        {% else %}

                {% switch field.DATA_TYPE %}
                {% case "tinyint" %}
                        {% code
                            checked := ""
                            if (field.Value > "") {
                                checked = "checked"
                            }
                        %}
                        {%= renderCheckBox(nameInput, titleLabel, 1, checked, events, dataJson) %}
                {% case "enum" %}
                    <label class="control-label" for="{%s key %}">{%s titleLabel %}:</label>
                    {%code t := field.renderEnum(nameInput, required, events, dataJson) %}
                    {%s= t %}
                {% case "set" %}
                    <label class="control-label" for="{%s key %}">{%s titleLabel %}:</label>
                    {%code t := field.renderSet(nameInput, required, events, dataJson) %}
                    {%s= t %}
                {% case "blob", "text" %}
                    <label class="control-label" for="{%s key %}">{%s titleLabel %}:</label>
                    <textarea id="{%s key %}" name="{%s nameInput %}" class="controls" placeholder="{%s placeholder %}">
                        {%s= field.Value  %}
                    </textarea>

               {% default %}
                    <label class="control-label" for="{%s key %}">{%s titleLabel %}</label>
                    <input id="{%s key %}" name="{%s nameInput %}" class="controls" placeholder="{%s placeholder %}"
                        {%s required %} {%s val %} {%s= events %} {%s= dataJson %}

                        {% if field.DATA_TYPE=="int" || field.DATA_TYPE=="double" %}
                            type="number"
                               {% if strings.Contains(field.COLUMN_TYPE, "unsigned") %}min="0"{% endif %}
                        {% elseif field.DATA_TYPE=="date" %}
                            type="date"
                        {% elseif field.DATA_TYPE=="datetime" %}
                            type="datetime"
                        {% elseif strings.Contains(key, "email") %}
                            type="email"
                        {% else %}
                            type="text"
                               {% if field.CHARACTER_MAXIMUM_LENGTH>0 %}
                                    maxlength="{%d field.CHARACTER_MAXIMUM_LENGTH %}"
                                    {%  if field.CHARACTER_MAXIMUM_LENGTH == 255 %}
                                        class="input-xlarge"
                                    {% endif %}
                               {% endif %}
                               {% if pattern > "" %}pattern="{%s= pattern %}" onkeyup="return validatePattern(this);"{% endif %}
                        {% endif %}
                    />
                {% endswitch %}

        {% endif %}
        </div>
    {% endfor %}
    <div class="form-actions">
        <button class="btn btn-large btn-primary" type="submit">Сохранить</button>

    </div>
</form>
{% endfunc %}
{% func renderCheckBox(key, title string, idx int, checked, events, dataJson string) %}
    <label class="checkbox" for="{%s key %}{%d idx %}">
        <input type="checkbox" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s title %}" {%s checked %}
                {%s= events %} {%s= dataJson %}
        />
        {%s title %}
    </label>
{% endfunc %}
{% func renderRadioBox(key, title string, idx int, checked, events, dataJson string) %}
    <label class="checkbox" for="{%s key %}{%d idx  %}">
        <input type="radio" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s title %}" {%s checked %}
                {%s= events %} {%s= dataJson %}
        />
        {%s title %}
    </label>
{% endfunc %}
