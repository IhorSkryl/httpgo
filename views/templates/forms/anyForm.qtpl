{% import (
    "github.com/ruslanBik4/httpgo/models/db"
    "strings"
    "strconv"
    "regexp"
    "log"
    "fmt"
) %}
{%  code
type FieldStructure struct {
    COLUMN_NAME   string
    DATA_TYPE string
    COLUMN_DEFAULT string
    IS_NULLABLE string
    CHARACTER_SET_NAME string
    COLUMN_COMMENT string
    COLUMN_TYPE string
    CHARACTER_MAXIMUM_LENGTH int
    Value string
    IsHidden bool
    CSSClass  string
    TableName string
    Events map[string] string
}
type FieldsTable struct {
    Name string
    IsDadata bool
    Rows [] FieldStructure
    Hiddens map[string] string
}
%}
{% code
func cutPartFromTitle(title, pattern, defaultStr string) (titleFull, titlePart string)  {
    titleFull = title
    if title == "" {
        return "", ""
    }
    posPattern := strings.Index(titleFull, pattern)
    if posPattern > 0 {
        titlePart = titleFull[posPattern + len(pattern):]
        titleFull = titleFull[:posPattern]
    } else {
        titlePart = defaultStr
    }

    return titleFull, titlePart
}
func (field *FieldStructure) GetColumnTitles() (titleFull, titleLabel, placeholder, pattern, dataJson string)  {
    titleFull = field.COLUMN_COMMENT
    if titleFull=="" {
        titleLabel = field.COLUMN_NAME
    } else if strings.Index(titleFull, ".") > 0 {
        titleLabel = titleFull[:strings.Index(titleFull, ".")]
    } else {
        titleLabel = titleFull
    }
    titleFull, pattern = cutPartFromTitle(titleFull, "//", "")
    titleFull, dataJson = cutPartFromTitle(titleFull, "{", "")
    titleFull, placeholder = cutPartFromTitle(titleFull, "#", titleFull)

    return titleFull, titleLabel, placeholder, pattern, dataJson
}
func getParentFieldName(tableName string) (name string) {
    var listNs db.FieldsTable

    if err := listNs.GetColumnsProp(tableName); err != nil {
        return ""
    }
    for _, list := range listNs.Rows {
        switch list.COLUMN_NAME {
        case "name":
            name = "name"
        case "title":
            name = "title"
        case "fullname":
            name = "fullname"
        }
    }

    return name

}
%}

{% func (field *FieldStructure) RenderMultiSelect(nameTable, tablePrefix, key, val, titleLabel, required  string) %}
    <label class="control-label" for="{%s tablePrefix+key %}">{%s titleLabel %}</label>
    <div class="btn-group dropdown" id="{%s key %}" name="{%s tablePrefix+key %}" {%s required %} {%s val %}>
        <a class="dropdown-toggle" role="button" data-toggle="dropdown" data-target="#" >
            <span>Выберите несколько значений в списке </span>
            <b class="caret"></b>
        </a>
        {% code
            if nameTable == "" {
                nameTable = field.TableName
            }
            nameTable = strings.TrimLeft(key, "setid_")

        %}
        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
            {%= field.getOptions(nameTable, field.Value, "li") %}
        </ul>
    </div>
{% endfunc %}
{% func (field *FieldStructure) RenderSelect(tablePrefix, key, val, titleLabel, required  string) %}
    <label class="control-label" for="{%s tablePrefix+key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s tablePrefix+key %}" class="controls" {%s required %} {%s val %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
            <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {%= field.getOptions(key[3:], field.Value, "option") %}
    </select>
{% endfunc %}

{% func (field *FieldStructure) renderParentSelect(nameTable, key, val, titleLabel, required  string) %}
    <label for="{%s key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s key %}" class="controls" {%s required %} {%s val %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
            <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {% code
            if nameTable == "" {
                nameTable = field.TableName
            }
        %}
        {%= field.getOptions(nameTable, field.Value, "option") %}
    </select>
{% endfunc %}
{% func (field *FieldStructure) getOptions(tableName, value, mode string) %}
            {% code
                name := getParentFieldName(tableName)
                if name == "" {
                    return
                }
                rows := db.DoQuery("select id, " + name + " from " + tableName)
                defer rows.Close()
                selected := ""
                idx := 0
                valueID, _ := strconv.Atoi(value)
            %}
            {%  for rows.Next() %}
                {%  code
                    var id int
                    var title string

                    if err := rows.Scan(&id, &title); err != nil {
                        log.Println(err)
                        continue
                    }
                    if valueID == id {
                        selected = "selected"
                    } else {
                        selected = ""
                    }
                    idx++
                %}
                {% if mode=="option" %}
                    <option value='{%d id %}' {%s selected %}>{%s title %}</option>
                {% else %}
                    <li role='presentation'>
                        {%= renderCheckBox(field.COLUMN_NAME, title, idx, "checked", "events", "") %}
                    </li>
                {% endif %}
            {% endfor %}
{% endfunc %}
{% func (ns *FieldsTable) ShowAnyForm(Action, Title string) %}
<form name="f{%s ns.Name %}" role='form' class="form-horizontal row-fluid" target="content" action="{%s Action %}" method="post"
      onsubmit="return saveForm(this, afterSaveAnyForm);" >
    <h2 class="form-signin-heading">{%s Title %}</h2>
    {% if ns.Name > "" %}
        <input type="hidden" name="table" value="{%s ns.Name %}" >
    {% endif %}
    {% for idx, field := range ns.Rows %}

        {% code
            key := field.COLUMN_NAME
            titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
            val := field.Value
            tablePrefix := ""
            required := ""

            if field.IS_NULLABLE=="NO" {
                required = "required"
            }

            if val > "" {
                val = "value=" + val + ""
            } else if field.COLUMN_DEFAULT > "" {
                val = "value=" + field.COLUMN_DEFAULT + ""
            }
            if dataJson > "" {
                dataJson = fmt.Sprintf("data-names='{% s}'", dataJson )
            }
            if field.TableName > "" {
                tablePrefix = field.TableName + ":"
            }
            nameInput := tablePrefix + key
            events := ""
            for name, funcName := range field.Events {
                events += fmt.Sprintf("%s=\"return %s;\"", name, funcName)
            }
        %}

        {% if (val > "") && ( (key=="id") || field.IsHidden ) %}
            <input type="hidden" name="{%s key %}" {%s val %}>
            {% continue %}
        {% elseif key=="id"%}
            {% continue %}
        {%  endif %}

        <div id="divField{%d idx %}" class="control-group field-{%s key %} {%s required %} {%s field.CSSClass %}"
                    {% if field.IsHidden %}style="display:none"{% endif %}
             data-toggle="tooltip" title="{%s= titleFull %}"
        >
        {% if key=="parent_id" %}
            {%= field.renderParentSelect(ns.Name, key, val, titleLabel, required) %}
        {% elseif strings.HasPrefix(key, "id_") %}
            {%= field.RenderSelect(tablePrefix, key, val, titleLabel, required) %}
        {% elseif strings.HasPrefix(key, "setid_") %}
            {%= field.RenderMultiSelect(ns.Name, tablePrefix, key, val, titleLabel, required) %}
        {% else %}

                {% switch field.DATA_TYPE %}
                {% case "tinyint" %}
                        {% code
                            checked := ""
                            if (field.Value > "") {
                                checked = "checked"
                            }
                        %}
                        {%= renderCheckBox(nameInput, titleLabel, 1, checked, events, dataJson) %}
                {% case "enum" %}
                    <label for="{%s key %}">{%s titleLabel %}:</label>
                    {%= field.renderEnum(nameInput, required, events, dataJson) %}
                {% case "set" %}
                    <label for="{%s key %}">{%s titleLabel %}:</label>
                    {%= field.renderSet(nameInput, required, events, dataJson) %}
                {% case "blob", "text" %}
                    <label for="{%s key %}">{%s titleLabel %}:</label>
                    <textarea id="{%s key %}" name="{%s nameInput %}" class="controls" placeholder="{%s placeholder %}">
                        {%s= field.Value  %}
                    </textarea>

               {% default %}
                    <label class="control-label" for="{%s key %}">{%s titleLabel %}</label>
                    <input id="{%s key %}" name="{%s nameInput %}" class="controls" placeholder="{%s placeholder %}"
                        {%s required %} {%s val %} {%s= events %} {%s= dataJson %}

                        {% if field.DATA_TYPE=="int" || field.DATA_TYPE=="double" %}
                            type="number"
                               {% if strings.Contains(field.COLUMN_TYPE, "unsigned") %}min="0"{% endif %}
                        {% elseif field.DATA_TYPE=="date" %}
                            type="date"
                        {% elseif field.DATA_TYPE=="datetime" %}
                            type="datetime"
                        {% elseif strings.Contains(key, "email") %}
                            type="email"
                        {% else %}
                            type="text"
                               {% if field.CHARACTER_MAXIMUM_LENGTH>0 %}
                                    maxlength="{%d field.CHARACTER_MAXIMUM_LENGTH %}"
                                    {%  if field.CHARACTER_MAXIMUM_LENGTH == 255 %}
                                        class="input-xlarge"
                                    {% endif %}
                               {% endif %}
                               {% if pattern > "" %}pattern="{%s= pattern %}" onkeyup="return validatePattern(this);"{% endif %}
                        {% endif %}
                    />
                {% endswitch %}

        {% endif %}
        </div>
    {% endfor %}
    <div class="form-actions">
        <button class="btn btn-large btn-primary" type="submit">Сохранить</button>

    </div>
</form>
{% endfunc %}
{% func (field *FieldStructure) renderSet(key, required, events, dataJson string) %}
    {% code
        enumValidator := regexp.MustCompile(`(?:'([^,]+)',?)`)
        fields := enumValidator.FindAllStringSubmatch(field.COLUMN_TYPE, -1)
        checked := ""
    %}
    {% for idx, title := range fields %}
        {% code
            enumVal := title[len(title)-1]
            if (field.Value > "") && (strings.Index(field.Value, enumVal) > -1) || (field.Value == "") && (enumVal == field.COLUMN_DEFAULT) {
                checked = "checked"
            } else {
                checked = ""
            }
        %}
        {%= renderCheckBox(key + "[]", enumVal, idx, checked, events, dataJson) %}
    {%  endfor %}
{% endfunc %}
{% func renderCheckBox(key, title string, idx int, checked, events, dataJson string) %}
    <label class="checkbox" for="{%s key %}{%d idx %}">
        <input type="checkbox" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s title %}" {%s checked %}
                {%s= events %} {%s= dataJson %}
        />
        {%s title %}
    </label>
{% endfunc %}
{% func (field *FieldStructure) renderEnum(key, required, events, dataJson string) %}
    {% code
        enumValidator := regexp.MustCompile(`'([^']+)'`)
        fields := enumValidator.FindAllStringSubmatch(field.COLUMN_TYPE, -1)
        renderSelect := len(fields) > 2
    %}

    {% if renderSelect %}
        <select id="{%s key %}" name="{%s key %}" class="controls" {%s required %} {%s= events %} {%s= dataJson %}>
    {% endif %}
    {% for idx, title := range fields %}
        {% code
            enumVal := title[len(title)-1]
            checked, selected  := "", ""
            if (field.Value > "") && (field.Value == enumVal) || (field.Value == "") && (enumVal == field.COLUMN_DEFAULT) {
              checked, selected = "checked", "selected"
            }
        %}
        {% if renderSelect %}
            <option value='{%s enumVal %}' {%s selected %}>{%s enumVal %}</option>
        {% else %}
            {%= renderRadioBox(key, enumVal, idx, checked, events, dataJson) %}
        {% endif %}
    {%  endfor %}
    {% if renderSelect %}
        </select>
    {% endif %}
{% endfunc %}
{% func renderRadioBox(key, title string, idx int, checked, events, dataJson string) %}
    <label class="checkbox" for="{%s key %}{%d idx  %}">
        <input type="radio" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s title %}" {%s checked %}
                {%s= events %} {%s= dataJson %}
        />
        {%s title %}
    </label>
{% endfunc %}
{% func (fields *FieldsTable) PutDataFrom(ns db.FieldsTable) %}
{% code
   for _, field := range ns.Rows {
        fieldStrc := &FieldStructure{
            COLUMN_NAME: field.COLUMN_NAME,
            DATA_TYPE  : field.DATA_TYPE,
            IS_NULLABLE: field.IS_NULLABLE,
            COLUMN_TYPE: field.COLUMN_TYPE,
            Events     : make(map[string] string, 0),
        }
        if field.CHARACTER_SET_NAME.Valid {
            fieldStrc.CHARACTER_SET_NAME = field.CHARACTER_SET_NAME.String
        }
        if field.COLUMN_COMMENT.Valid {
            fieldStrc.COLUMN_COMMENT = field.COLUMN_COMMENT.String
        }
        if field.CHARACTER_MAXIMUM_LENGTH.Valid {
            fieldStrc.CHARACTER_MAXIMUM_LENGTH = int(field.CHARACTER_MAXIMUM_LENGTH.Int64)
        }
        if field.COLUMN_DEFAULT.Valid {
            fieldStrc.COLUMN_DEFAULT = field.COLUMN_DEFAULT.String
        }
        fieldStrc.IsHidden = false
        fields.Rows = append(fields.Rows,*fieldStrc)
    }
%}
{% endfunc %}