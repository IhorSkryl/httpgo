{% import (
    "strings"
    "fmt"
) %}
Показываем связанную таблицу RenderTable
{% func (field *FieldStructure) RenderTable(ns *FieldsTable, tablePrefix, key, val, titleLabel, required string) %}
    <link href="/tables.css" rel="stylesheet">
    {% if field.CSSClass == "" %}
        <div class="dropdown">
            <a class="dropdown-toggle" role="button" class="btn" data-toggle="modal" data-target="#div{%s tablePrefix+key %}" >
                <span>{%s titleLabel %}</span>
                <b class="caret"></b>
            </a>
    {% endif %}
            <div class="{% if field.CSSClass == "" %}modal hide{% else %}{%s field.CSSClass %}{% endif %}"
                id="div{%s tablePrefix+key %}" tabindex="-1" role="dialog" aria-labelledby="{%s tablePrefix+key %}ModalLabel"
                aria-hidden="true">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">X</button>
                     <h3 id="{%s tablePrefix+key %}ModalLabel">{%s titleLabel %}</h3>
                </div>
                <div class="modal-body">
                    <table  class="table table-striped table-bordered table-hover table-condensed" role="menu" aria-labelledby="dLabel">
                        {%code field.getTableFrom(ns, tablePrefix, key) %}
                        {%s= field.Html %}
                    </table>
                </div>
                <div class="modal-footer">
                    <button onclick="return addNewRowTableID(this);" data-last-tr="tr{%s tablePrefix+key %}">Добавить</button>
                </div>
            </div>
    {% if field.CSSClass == "" %}
        </div> {% comment %} enddiv field.CSSClass == "" {% endcomment %}
    {% endif %}
{% endfunc %}
Здесь рисуем элементы ввода для полей, обозначающие связи таблицы многие-к-многим
При этом имя поля однозначно определяет тип связи и таблицу, с которой связываемся
{% func (field *FieldStructure) RenderMultiSelect(ns *FieldsTable, tablePrefix, key, val, titleLabel, required string) %}
    {% if field.CSSClass == "" %}
    <div class="dropdown">
        <a class="dropdown-toggle" role="button" class="btn" data-toggle="modal" data-target="#div{%s tablePrefix+key %}" >
            <span>{%s titleLabel %}</span>
            <b class="caret"></b>
        </a>
    {% endif %}
        <div class="{% if field.CSSClass == "" %}modal hide{% else %}{%s field.CSSClass %}{% endif %}"
            id="div{%s tablePrefix+key %}" tabindex="-1" role="dialog"
             aria-labelledby="{%s tablePrefix+key %}ModalLabel" aria-hidden="true">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">X</button>
                <h3 id="{%s tablePrefix+key %}ModalLabel">{%s titleLabel %}</h3>
            </div>
            <div class="modal-body">
                <ul class="hor-menu" role="menu" aria-labelledby="dLabel">
                {%code field.getMultiSelect(ns, key) %}
                {%s= field.Html %}
                </ul>
            </div>
            <div class="modal-footer">
                <input >
                <button onclick="return addNewItems(this);" data-parent-div="div{%s tablePrefix+key %}">Добавить</button>
            </div>
        </div>
    {% if field.CSSClass == "" %}
        </div> {% comment %} enddiv field.CSSClass == "" {% endcomment %}
    {% endif %}
{% endfunc %}
{% func (field *FieldStructure) RenderForeignSelect(tablePrefix, key, val, titleLabel, required, events, dataJson string) %}
    <label class="control-label" for="{%s tablePrefix+key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s tablePrefix+key %}" class="controls" {%s required %}  {%s= events %} {%s= dataJson %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
            <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {%code field.getOptions(key[3:], val) %}
        {%s= field.Html %}
    </select>
{% endfunc %}

{% func (field *FieldStructure) RenderParentSelect(nameTable, key, val, titleLabel, required, events, dataJson string) %}
    <label class="control-label" for="{%s key %}">{%s titleLabel %}</label>
    <select id="{%s key %}" name="{%s key %}" class="controls" {%s required %}  {%s= events %} {%s= dataJson %}>
        {% if field.IS_NULLABLE=="YES" && val=="" %}
            <option value="" selected>Значение можно не указывать</option>
        {% else %}
            <option disabled >Выберите значение из списка</option>
        {% endif %}
        {% code
            if nameTable == "" {
                nameTable = field.TableName
            }
        %}
        {%code field.getOptions(nameTable, val) %}
        {%s= field.Html %}
    </select>
{% endfunc %}
{% func (ns *FieldsTable) ShowAnyForm(Action, Title string) %}
{%code
    var figure string
    if ns.SaveFormEvents == nil {
        ns.SaveFormEvents = make(map[string] string, 1)
        ns.SaveFormEvents["successSaveForm"] = "afterSaveAnyForm"
    }
    formName := "f" + ns.Name
%}
<form id="{%s formName %}" name="{%s formName %}" role='form' class="form-horizontal row-fluid" target="content" action="{%s Action %}" method="post"
      onsubmit="return saveForm(this, {%s= ns.SaveFormEvents["successSaveForm"] %});" >
      {% code
        setDatePicker := ""
      %}
    <h2 class="form-signin-heading">{%s Title %}</h2>
    {% if ns.Name > "" %}
        <input type="hidden" name="table" value="{%s ns.Name %}" >
    {% endif %}
    {% for idx, field := range ns.Rows %}

        {% code
            key := field.COLUMN_NAME

            if field.DATA_TYPE=="date" {
                setDatePicker += "$('#" + key + `').datetimepicker({format:'Y-m-d'});
                `
            } else if field.DATA_TYPE=="datetime" {
                setDatePicker += "$('#" + key + `').datetimepicker({format:'Y-m-d H:i'});
                `
            }

            titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
            val := field.Value
            tablePrefix := ""
            required := ""

            if field.IS_NULLABLE=="NO" {
                required = "required"
            }
            // TODO: check for new record

            if (val == "") && (field.COLUMN_DEFAULT > "") {
                val = field.COLUMN_DEFAULT
            }
            if dataJson > "" {
                dataJson = fmt.Sprintf(`data-names="{% s}"`, dataJson )
            }
            if field.TableName > "" {
                tablePrefix = field.TableName + ":"
            }
            nameInput := tablePrefix + key
            events := ""
            for name, funcName := range field.Events {
                events += fmt.Sprintf(`%s="return %s;"`, name, funcName)
            }
        %}

        {% if figure != field.Figure %}
            {% if figure > "" %}
                </figure>
            {% endif %}
            {%code
                figure = field.Figure
            %}
            {% if figure > "" %}
                <figure class="{%s field.CSSClass %}">
                <figcaption>{%s figure %}</figcaption>
            {% endif %}
        {% endif %}


        {% if (val > "") && ( (key=="id") || field.IsHidden ) %}
            <input type="hidden" name="{%s nameInput %}" {% if val > "" %}value="{%s val %}"{% endif %} >
            {% continue %}
        {% elseif key=="id"%}
            {% continue %}
        {%  endif %}

        <div id="divField{%d idx %}" class="input-wrap {%s= required %} field-{%s nameInput %} {%s field.CSSClass %}"
            {% if field.IsHidden %} style="display:none" {% endif %}
            data-toggle="tooltip" title="{%s titleFull %}"
        >
        {% if key=="parent_id" %}
            {%= field.RenderParentSelect(ns.Name, key, val, titleLabel, required, events, dataJson) %}
        {% elseif strings.HasPrefix(key, "id_") %}
            {%= field.RenderForeignSelect(tablePrefix, key, val, titleLabel, required, events, dataJson) %}
        {% elseif strings.HasPrefix(key, "setid_") || strings.HasPrefix(key, "nodeid_") %}
            {%= field.RenderMultiSelect(ns, tablePrefix, key, val, titleLabel, required) %}
        {% elseif strings.HasPrefix(key, "tableid_") %}
            {%= field.RenderTable(ns, tablePrefix, key, val, titleLabel, required) %}
        {% else %}

                {% switch field.DATA_TYPE %}
                {% case "tinyint" %}
                        {% code
                            checked := ""
                            if (val == "1") {
                                checked = "checked"
                            }
                        %}
                        {%= RenderCheckBox(nameInput, "1", titleLabel, 1, checked, events, dataJson) %}
                {% case "enum" %}
                    <label class="input-label" for="{%s key %}">{%s titleLabel %}:</label>
                    {%code t := field.RenderEnum(nameInput, val, required, events, dataJson) %}
                    {%s= t %}
                {% case "set" %}
                    <label class="input-label" for="{%s key %}">{%s titleLabel %}:</label>
                    {%code t := field.RenderSet(nameInput, val, required, events, dataJson) %}
                    {%s= t %}
                {% case "blob" %}
                     <label class="input-label" for="{%s key %}">{%s titleLabel %}:</label>
                     <input type="file"
                        id="{%s nameInput %}" name="{%s nameInput %}" class="controls"
                                                {%s= required %} {%s= events %} {%s= dataJson %}
                     />
               {% case "text" %}
                        <label class="control-label" for="{%s key %}">{%s titleLabel %}:</label>
                    <textarea id="{%s key %}" name="{%s nameInput %}" class="controls" placeholder="{%s placeholder %}" {%s= events %} {%s= dataJson %}>
                        {%s= val %}
                    </textarea>
               {% default %}
                    {%= field.RenderInputFromType(nameInput, val, titleLabel, placeholder, pattern, required, events, dataJson) %}
               {% endswitch %}

        {% endif %}
        </div>
    {% endfor %}
    {% if figure > "" %}
        </figure>
    {% endif %}
    <div class="form-actions">
        <button class="main-btn" type="submit">Сохранить</button>

    </div>
</form>
{% if setDatePicker > "" %}
    <head>
        <script src="/jquery.datetimepicker.js"></script>
    </head>
    <script>
        $(function () {
            {%s= setDatePicker %}
        })
    </script>
{% endif %}
{% if onload, ok := ns.DataJSOM["onload"]; ok %}
    <script>
        $(function () {
            {%s= onload.(string) %}
        })
    </script>
{% endif %}
{% endfunc %}
{% func (fieldStrc *FieldStructure) RenderInputFromType(nameInput, val, title, placeholder, pattern, required, events, dataJson string) %}
                    <label class="input-label" for="{%s nameInput %}">{%s title %}</label>
                    <div class="form-items-wrap">
                        <span class="custom-input-label" for="name">{%s placeholder %}</span>
                        <input type=

                        {% if fieldStrc.InputType > "" %}
                            "{%s fieldStrc.InputType %}"
                        {% elseif fieldStrc.DATA_TYPE=="int" || fieldStrc.DATA_TYPE=="double" %}
                            "number"
                               {% if strings.Contains(fieldStrc.COLUMN_TYPE, "unsigned") %}min="0"{% endif %}
                        {% elseif fieldStrc.DATA_TYPE=="date" %}
                            "date"
                        {% elseif fieldStrc.DATA_TYPE=="datetime" %}
                            "datetime"
                        {% elseif strings.Contains(nameInput, "email") %}
                            "email"
                        {% else %}
                            "text"
                               {% if fieldStrc.CHARACTER_MAXIMUM_LENGTH>0 %}
                                    maxlength="{%d fieldStrc.CHARACTER_MAXIMUM_LENGTH %}"
                                    {%  if fieldStrc.CHARACTER_MAXIMUM_LENGTH == 255 %}
                                        style="width:350px;"
                                    {% endif %}
                               {% endif %}
                               {% if pattern > "" %}pattern="{%s= pattern %}" onkeyup="return validatePattern(this);"{% endif %}
                        {% endif %}
                        id="{%s nameInput %}" name="{%s nameInput %}" class="business-form-input" placeholder="{%s placeholder %}"
                                                {% if val > "" %} value="{%s val %}" {% endif %}
                                                {%s= required %} {%s= events %} {%s= dataJson %}
                    />
                    </div>
{% endfunc %}

{% func RenderCheckBox(key, val, title string, idx int, checked, events, dataJson string) %}
    <label class="checkbox" for="{%s key %}{%d idx %}">
        <input type="checkbox" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s val %}" {%s= checked %}
                {%s= events %} {%s= dataJson %}
        />
        {%s title %}
    </label>
{% endfunc %}
{% func renderRadioBox(key, val, title string, idx int, checked, events, dataJson string) %}
    <label class="checkbox" for="{%s key %}{%d idx %}">
        <input type="radio" id="{%s key %}{%d idx %}" name="{%s key %}" value="{%s val %}" {%s= checked %}
                {%s= events %} {%s= dataJson %}
        />
        {%s title %}
    </label>
{% endfunc %}
{% func renderSelect(key, options, required, events, dataJson string) %}
    <select id="{%s key %}" name="{%s key %}" class="business-form-select" {%s= required %} {%s= events %} {%s= dataJson %}>
        {%s= options %}
    </select>
{% endfunc %}
{% func renderOption(val, title, selected string) %}
    <option value="{%s val %}" {%s= selected %} >{%s title %}</option>
{% endfunc %}

