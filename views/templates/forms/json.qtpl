All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

{% import (
	"go/types"

	"github.com/ruslanBik4/httpgo/views/templates/json"
	"github.com/ruslanBik4/httpgo/typesExt"
	)
%}

{% stripspace %}
{% collapsespace %}
json for front forms.
{% func FormJSON(title, action, method string, columns [] ColumnDecor) %}
  {
    "title" : '{%s= title %}',
    "action": '{%s= action %}',
    "method": '{%s= method %}',
    "fields": [
                {% for i, col := range columns %}

                    {% if i > 0 %}
                        ,
                    {% endif %}
                    {
                        {% code
                            values := col.GetValues()
                        %}
                        "name": "{%s col.InputName(-1) %}",
                        "required": {%v col.Required() %},
                        "type": "{%= col.InputType()%}"
                        {% if col.CharacterMaximumLength() > 0 %}
                        , "maxLength": {%d col.CharacterMaximumLength() %}
                        {% endif %}
                        {% switch len(values) %}
                        {% case 0 %}
                        {% case 1 %}
                        , "value": "{%v values %}"
                        {% default %}
                        , "value": {%= json.SimpleDimension(values) %}
                        {% endswitch %}

                        {% if col.Comment() > "" %}
                        , "title": "{%s col.Comment() %}"
                        {% endif %}
                        {% if col.IsHidden %}
                         , "hidden": "hidden"
                        {% endif %}
                   }
                {% endfor %}
               ]
  }
{% endfunc %}

{% func FormHTML(title, action, method string, columns [] ColumnDecor) %}
<form id="{%s title %}form" name="{%s title %}" role='form' class="form-horizontal row-fluid" target="content"
         action="{%s action %}" method="{%s= method %}" enctype="multipart/form-data"
      onsubmit="return saveForm(this, afterSaveAnyForm);"  caption="{%s title %}" >

                {% for i, col := range columns %}
                  <div id="divField{%d i %}" class="input-wrap"
                  {% if col.IsHidden %} style="display:none" {% endif %}
                    <label class="input-label" for="{%s col.Name() %}">{%s col.Label() %}</label>
                    {%= col.RenderInputs()  %}
                   </div>
                {% endfor %}

    <div class="form-actions">
        <button class="main-btn" type="submit">Сохранить</button>
    </div>
</form>
{% endfunc %}

{% func (col *ColumnDecor) RenderInputs()  %}
 {% for i, val := range col.GetValues() %}
                col.RenderInput(val)
                <input type="{%= col.InputType() %}" name="{%s col.InputName(i) %}"
                {% if col.CharacterMaximumLength() > 0 %}  max = "{%d col.CharacterMaximumLength() %}" {% endif %}
                {% if val != nil %} value = "{%v val %}" {% endif %}
                 {% if col.Required() %} required="true" {% endif %}
                 {% if col.IsHidden %} hidden {% endif %}
               >
 {% endfor %}
{% endfunc %}

{% func (col *ColumnDecor) InputType()  %}
    {% switch %}
    {% case typesExt.IsNumeric( col.BasicTypeInfo() ) %}
     number
    {% case col.BasicType() == types.Bool %}
     checkbox
    {% default %}
        {% switch col.Type() %}
        {% case "date", "datetime", "timestampt", "timestamptz", "time", "_date", "_timestampt", "_timestamptz", "_time" %}
         datetime
        {% case "tel" %} tel
        {% case "password" %} password
        {% default %} text
        {% endswitch %}
    {% endswitch %}
{% endfunc %}

{% endstripspace %}
{% endcollapsespace %}