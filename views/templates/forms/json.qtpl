All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

{% import (
	"go/types"

	"github.com/ruslanBik4/httpgo/views/templates/json"
	"github.com/ruslanBik4/httpgo/typesExt"
	)
%}
{% code
    type FormField struct {
        Title, Action, Method, Description string
    }
%}
{% stripspace %}
{% collapsespace %}
json for front forms https://storybook.pm-db.net/?path=/story/form-types--page
{% func (f *FormField) FormJSON(blocks ... BlockColumns) %}
  {
    "title" : "{%s= f.Title %}",
    "action": "{%s= f.Action %}",
    "description": "{%s= f.Description %}",
    "method": "{%s= f.Method %}",
    "blocks": [
        {% for i, block := range blocks %}

        {% if i > 0 %}
            ,
        {% endif %}
        {
           "id": "{%d block.Id %}",
           "title": "{%s= block.Title %}",
           "description": "{%s= block.Description %}",
            "fields": [
                {% for j, col := range block.Columns %}

                    {% if j > 0 %}
                        ,
                    {% endif %}
                    {
                        {% code
                            values := col.GetValues()
                        %}
                        "name": "{%s col.InputName(-1) %}",
                        "required": {%v col.Required() %},
                        "type": "{%= col.InputType()%}"
                        {% if col.CharacterMaximumLength() > 0 %}
                        , "maxLength": {%d col.CharacterMaximumLength() %}
                        {% endif %}
                        {% switch len(values) %}
                        {% case 0 %}
                        {% case 1 %}
                            {% if values[0] != nil %}
                                , "value": "{%v values[0] %}"
                            {% endif %}
                       {% default %}
                        , "value": {%= json.SimpleDimension(values) %}
                        {% endswitch %}

                        , "title": "{%s col.Label() %}"

                        {% if p := col.Pattern(); p > "" %}
                        , "pattern":"{%j p %}"
                        {% endif %}

                        {% if col.IsReadOnly %}
                         , "readonly": true
                        {% endif %}
                   }
                {% endfor %}
                 {% for _, button := range block.Buttons %}
                 ,
                 {
                     "type":  "button",
                     "title": "{%s button.Title %}",
                     "position": {% if button.Position %}"right"{% else %}"left"{% endif %}
                 }
                 {% endfor %}
             ]
       }
    {% endfor %}
   ]
  }
{% endfunc %}


{% func (col *ColumnDecor) RenderInputs()  %}
 {% for i, val := range col.GetValues() %}
                <input type="{%= col.InputType() %}" name="{%s col.InputName(i) %}"
                {% if col.CharacterMaximumLength() > 0 %}  max = "{%d col.CharacterMaximumLength() %}" {% endif %}
                {% if val != nil %} value = "{%v val %}" {% endif %}
                 {% if col.Required() %} required="true" {% endif %}
                 {% if col.Pattern() > "" %} pattern="{%s col.Pattern() %}"  onkeyup="return validatePattern(this);" {% endif %}
                 {% if col.Placeholder() > "" %} placeholder="{%s col.Placeholder() %}" {% endif %}
                 {% if col.IsHidden %} hidden {% endif %}
                 {% if col.IsReadOnly %} readonly disabled {% endif %}
               >
 {% endfor %}
 {% if col.isSlice %}
        <button class="main-btn" type="button"
        onclick="this.parentNode.insertBefore(this.previousElementSibling.cloneNode(), this); return false;">+</button>

 {% endif %}
{% endfunc %}

{% func (col *ColumnDecor) InputType()  %}
    {% if col.IsHidden %}
     , "hidden": true
    {% else %}
        {% switch %}
        {% case typesExt.IsNumeric( col.BasicTypeInfo() ) %}
         number
        {% case col.BasicType() == types.Bool %}
         switch
        {% default %}
            {% switch col.Type() %}
            {% case "date", "_date" %}
             date
            {% case "datetime", "timestampt", "timestamptz", "time", "_timestampt", "_timestamptz", "_time" %}
             datetime
            {% case "email" %} email
            {% case "tel" %} tel
            {% case "password" %} password
            {% default %} text
            {% endswitch %}
        {% endswitch %}
    {% endif %}
{% endfunc %}

{% func (f *FormField) FormHTML(columns [] ColumnDecor) %}
<form id="{%s f.Title %}form" name="{%s f.Title %}" role='form' class="form-horizontal row-fluid" target="content"
         action="{%s f.Action %}" method="{%s= f.Method %}" enctype="multipart/form-data"
      onsubmit="return saveForm(this, afterSaveAnyForm);"  caption="{%s f.Title %}" >

                {% for i, col := range columns %}
                  <div id="divField{%d i %}" class="input-wrap"
                  {% if col.IsHidden %} style="display:none" {% endif %}
                    <label class="input-label" for="{%s col.Name() %}">{%s col.Label() %}</label>
                    {%= col.RenderInputs()  %}
                   </div>
                {% endfor %}

    <div class="form-actions">
        <button class="main-btn" type="submit">Сохранить</button>
    </div>
</form>
<script>
{% endstripspace %}
{% endcollapsespace %}
function validatePattern(thisElem) {
    var re = thisElem.pattern,
        result = true;

    if (re == "") {
        return true;
    }

    try {

        re = new RegExp(re);
        result = re.test(thisElem.value);
        if(result){
            thisElem.style.borderColor = 'green';
        } else {
            thisElem.style.borderColor = 'red';
        }

    } catch (e) {
        console.log(e)
    }

    return result;
}
</script>
{% endfunc %}
