// Code generated by qtc from "anyjson.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// All the text outside function templates is treated as comments,
// i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
// выводим массив массивов (основное назначение для таблиц БД)

//line views/templates/json/anyjson.qtpl:7
package json

//line views/templates/json/anyjson.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/templates/json/anyjson.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/templates/json/anyjson.qtpl:7
func StreamSliceJSON(qw422016 *qt422016.Writer, mapJSON MapMultiDimension) {
//line views/templates/json/anyjson.qtpl:7
	qw422016.N().S(`[`)
//line views/templates/json/anyjson.qtpl:9
	for key, arrJSON := range mapJSON {
//line views/templates/json/anyjson.qtpl:10
		if key > 0 {
//line views/templates/json/anyjson.qtpl:10
			qw422016.N().S(`,`)
//line views/templates/json/anyjson.qtpl:10
		}
//line views/templates/json/anyjson.qtpl:10
		StreamAnyJSON(qw422016, arrJSON)
//line views/templates/json/anyjson.qtpl:11
	}
//line views/templates/json/anyjson.qtpl:11
	qw422016.N().S(`]`)
//line views/templates/json/anyjson.qtpl:13
}

//line views/templates/json/anyjson.qtpl:13
func WriteSliceJSON(qq422016 qtio422016.Writer, mapJSON MapMultiDimension) {
//line views/templates/json/anyjson.qtpl:13
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/templates/json/anyjson.qtpl:13
	StreamSliceJSON(qw422016, mapJSON)
//line views/templates/json/anyjson.qtpl:13
	qt422016.ReleaseWriter(qw422016)
//line views/templates/json/anyjson.qtpl:13
}

//line views/templates/json/anyjson.qtpl:13
func SliceJSON(mapJSON MapMultiDimension) string {
//line views/templates/json/anyjson.qtpl:13
	qb422016 := qt422016.AcquireByteBuffer()
//line views/templates/json/anyjson.qtpl:13
	WriteSliceJSON(qb422016, mapJSON)
//line views/templates/json/anyjson.qtpl:13
	qs422016 := string(qb422016.B)
//line views/templates/json/anyjson.qtpl:13
	qt422016.ReleaseByteBuffer(qb422016)
//line views/templates/json/anyjson.qtpl:13
	return qs422016
//line views/templates/json/anyjson.qtpl:13
}

// получаем объект произвольной формы и возвращаем JSON текстом

//line views/templates/json/anyjson.qtpl:16
func StreamAnyJSON(qw422016 *qt422016.Writer, arrJSON MultiDimension) {
//line views/templates/json/anyjson.qtpl:16
	qw422016.N().S(`{`)
//line views/templates/json/anyjson.qtpl:17
	comma := ""

//line views/templates/json/anyjson.qtpl:18
	for key, value := range arrJSON {
//line views/templates/json/anyjson.qtpl:19
		qw422016.E().S(comma)
//line views/templates/json/anyjson.qtpl:19
		qw422016.N().S(`"`)
//line views/templates/json/anyjson.qtpl:19
		qw422016.E().S(key)
//line views/templates/json/anyjson.qtpl:19
		qw422016.N().S(`":`)
//line views/templates/json/anyjson.qtpl:19
		StreamElement(qw422016, value)
//line views/templates/json/anyjson.qtpl:19
		comma = ","

//line views/templates/json/anyjson.qtpl:20
	}
//line views/templates/json/anyjson.qtpl:20
	qw422016.N().S(`}`)
//line views/templates/json/anyjson.qtpl:22
}

//line views/templates/json/anyjson.qtpl:22
func WriteAnyJSON(qq422016 qtio422016.Writer, arrJSON MultiDimension) {
//line views/templates/json/anyjson.qtpl:22
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/templates/json/anyjson.qtpl:22
	StreamAnyJSON(qw422016, arrJSON)
//line views/templates/json/anyjson.qtpl:22
	qt422016.ReleaseWriter(qw422016)
//line views/templates/json/anyjson.qtpl:22
}

//line views/templates/json/anyjson.qtpl:22
func AnyJSON(arrJSON MultiDimension) string {
//line views/templates/json/anyjson.qtpl:22
	qb422016 := qt422016.AcquireByteBuffer()
//line views/templates/json/anyjson.qtpl:22
	WriteAnyJSON(qb422016, arrJSON)
//line views/templates/json/anyjson.qtpl:22
	qs422016 := string(qb422016.B)
//line views/templates/json/anyjson.qtpl:22
	qt422016.ReleaseByteBuffer(qb422016)
//line views/templates/json/anyjson.qtpl:22
	return qs422016
//line views/templates/json/anyjson.qtpl:22
}

// пишем элемент массива в зависемости от типа

//line views/templates/json/anyjson.qtpl:25
func StreamElement(qw422016 *qt422016.Writer, value interface{}) {
//line views/templates/json/anyjson.qtpl:26
	switch vv := value.(type) {
//line views/templates/json/anyjson.qtpl:27
	case string:
//line views/templates/json/anyjson.qtpl:27
		qw422016.N().S(`"`)
//line views/templates/json/anyjson.qtpl:27
		qw422016.N().J(vv)
//line views/templates/json/anyjson.qtpl:27
		qw422016.N().S(`"`)
//line views/templates/json/anyjson.qtpl:28
	case bool:
//line views/templates/json/anyjson.qtpl:28
		qw422016.E().V(vv)
//line views/templates/json/anyjson.qtpl:29
	case int:
//line views/templates/json/anyjson.qtpl:29
		qw422016.N().D(vv)
//line views/templates/json/anyjson.qtpl:30
	case uint:
//line views/templates/json/anyjson.qtpl:30
		qw422016.N().D(int(vv))
//line views/templates/json/anyjson.qtpl:31
	case int32:
//line views/templates/json/anyjson.qtpl:31
		qw422016.N().D(int(vv))
//line views/templates/json/anyjson.qtpl:32
	case int64:
//line views/templates/json/anyjson.qtpl:32
		qw422016.N().DL(vv)
//line views/templates/json/anyjson.qtpl:33
	case float32:
//line views/templates/json/anyjson.qtpl:33
		qw422016.N().F(float64(vv))
//line views/templates/json/anyjson.qtpl:34
	case float64:
//line views/templates/json/anyjson.qtpl:34
		qw422016.N().F(vv)
//line views/templates/json/anyjson.qtpl:35
	case nil:
//line views/templates/json/anyjson.qtpl:35
		qw422016.N().S(`null`)
//line views/templates/json/anyjson.qtpl:36
	case stringDimension:
//line views/templates/json/anyjson.qtpl:37
		StreamStringDimension(qw422016, vv)
//line views/templates/json/anyjson.qtpl:38
	case simpleDimension:
//line views/templates/json/anyjson.qtpl:39
		StreamSimpleDimension(qw422016, vv)
//line views/templates/json/anyjson.qtpl:40
	case MultiDimension:
//line views/templates/json/anyjson.qtpl:41
		StreamAnyJSON(qw422016, vv)
//line views/templates/json/anyjson.qtpl:42
	case MapMultiDimension:
//line views/templates/json/anyjson.qtpl:43
		StreamSliceJSON(qw422016, vv)
//line views/templates/json/anyjson.qtpl:44
	default:
//line views/templates/json/anyjson.qtpl:45
		if vSimple, ok := vv.([]interface{}); ok {
//line views/templates/json/anyjson.qtpl:46
			StreamSimpleDimension(qw422016, vSimple)
//line views/templates/json/anyjson.qtpl:47
		} else if arrJSON, ok := vv.(map[string]interface{}); ok {
//line views/templates/json/anyjson.qtpl:48
			StreamAnyJSON(qw422016, arrJSON)
//line views/templates/json/anyjson.qtpl:49
		} else if mapArrJSON, ok := vv.([]map[string]interface{}); ok {
//line views/templates/json/anyjson.qtpl:50
			StreamSliceJSON(qw422016, mapArrJSON)
//line views/templates/json/anyjson.qtpl:51
		} else {
//line views/templates/json/anyjson.qtpl:51
			qw422016.N().S(`"`)
//line views/templates/json/anyjson.qtpl:52
			qw422016.E().V(vv)
//line views/templates/json/anyjson.qtpl:52
			qw422016.N().S(`"`)
//line views/templates/json/anyjson.qtpl:53
		}
//line views/templates/json/anyjson.qtpl:54
	}
//line views/templates/json/anyjson.qtpl:55
}

//line views/templates/json/anyjson.qtpl:55
func WriteElement(qq422016 qtio422016.Writer, value interface{}) {
//line views/templates/json/anyjson.qtpl:55
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/templates/json/anyjson.qtpl:55
	StreamElement(qw422016, value)
//line views/templates/json/anyjson.qtpl:55
	qt422016.ReleaseWriter(qw422016)
//line views/templates/json/anyjson.qtpl:55
}

//line views/templates/json/anyjson.qtpl:55
func Element(value interface{}) string {
//line views/templates/json/anyjson.qtpl:55
	qb422016 := qt422016.AcquireByteBuffer()
//line views/templates/json/anyjson.qtpl:55
	WriteElement(qb422016, value)
//line views/templates/json/anyjson.qtpl:55
	qs422016 := string(qb422016.B)
//line views/templates/json/anyjson.qtpl:55
	qt422016.ReleaseByteBuffer(qb422016)
//line views/templates/json/anyjson.qtpl:55
	return qs422016
//line views/templates/json/anyjson.qtpl:55
}

// получаем массив произвольной формы и возвращаем JSON текстом

//line views/templates/json/anyjson.qtpl:57
func StreamArrJSON(qw422016 *qt422016.Writer, arrJSON []interface{}) {
//line views/templates/json/anyjson.qtpl:57
	qw422016.N().S(`[`)
//line views/templates/json/anyjson.qtpl:58
	comma := ""

//line views/templates/json/anyjson.qtpl:59
	for _, value := range arrJSON {
//line views/templates/json/anyjson.qtpl:59
		qw422016.E().S(comma)
//line views/templates/json/anyjson.qtpl:59
		StreamElement(qw422016, value)
//line views/templates/json/anyjson.qtpl:59
		comma = ","

//line views/templates/json/anyjson.qtpl:60
	}
//line views/templates/json/anyjson.qtpl:60
	qw422016.N().S(`]`)
//line views/templates/json/anyjson.qtpl:62
}

//line views/templates/json/anyjson.qtpl:62
func WriteArrJSON(qq422016 qtio422016.Writer, arrJSON []interface{}) {
//line views/templates/json/anyjson.qtpl:62
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/templates/json/anyjson.qtpl:62
	StreamArrJSON(qw422016, arrJSON)
//line views/templates/json/anyjson.qtpl:62
	qt422016.ReleaseWriter(qw422016)
//line views/templates/json/anyjson.qtpl:62
}

//line views/templates/json/anyjson.qtpl:62
func ArrJSON(arrJSON []interface{}) string {
//line views/templates/json/anyjson.qtpl:62
	qb422016 := qt422016.AcquireByteBuffer()
//line views/templates/json/anyjson.qtpl:62
	WriteArrJSON(qb422016, arrJSON)
//line views/templates/json/anyjson.qtpl:62
	qs422016 := string(qb422016.B)
//line views/templates/json/anyjson.qtpl:62
	qt422016.ReleaseByteBuffer(qb422016)
//line views/templates/json/anyjson.qtpl:62
	return qs422016
//line views/templates/json/anyjson.qtpl:62
}

// получаем массив объектов произвольной формы и возвращаем JSON текстом

//line views/templates/json/anyjson.qtpl:64
func StreamSimpleDimension(qw422016 *qt422016.Writer, arrJSON simpleDimension) {
//line views/templates/json/anyjson.qtpl:64
	qw422016.N().S(`[`)
//line views/templates/json/anyjson.qtpl:65
	comma := ""

//line views/templates/json/anyjson.qtpl:66
	for _, value := range arrJSON {
//line views/templates/json/anyjson.qtpl:66
		qw422016.E().S(comma)
//line views/templates/json/anyjson.qtpl:66
		StreamElement(qw422016, value)
//line views/templates/json/anyjson.qtpl:66
		comma = ","

//line views/templates/json/anyjson.qtpl:67
	}
//line views/templates/json/anyjson.qtpl:67
	qw422016.N().S(`]`)
//line views/templates/json/anyjson.qtpl:69
}

//line views/templates/json/anyjson.qtpl:69
func WriteSimpleDimension(qq422016 qtio422016.Writer, arrJSON simpleDimension) {
//line views/templates/json/anyjson.qtpl:69
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/templates/json/anyjson.qtpl:69
	StreamSimpleDimension(qw422016, arrJSON)
//line views/templates/json/anyjson.qtpl:69
	qt422016.ReleaseWriter(qw422016)
//line views/templates/json/anyjson.qtpl:69
}

//line views/templates/json/anyjson.qtpl:69
func SimpleDimension(arrJSON simpleDimension) string {
//line views/templates/json/anyjson.qtpl:69
	qb422016 := qt422016.AcquireByteBuffer()
//line views/templates/json/anyjson.qtpl:69
	WriteSimpleDimension(qb422016, arrJSON)
//line views/templates/json/anyjson.qtpl:69
	qs422016 := string(qb422016.B)
//line views/templates/json/anyjson.qtpl:69
	qt422016.ReleaseByteBuffer(qb422016)
//line views/templates/json/anyjson.qtpl:69
	return qs422016
//line views/templates/json/anyjson.qtpl:69
}

// получаем массив строк и возвращаем JSON текстом

//line views/templates/json/anyjson.qtpl:71
func StreamStringDimension(qw422016 *qt422016.Writer, arrJSON stringDimension) {
//line views/templates/json/anyjson.qtpl:71
	qw422016.N().S(`[`)
//line views/templates/json/anyjson.qtpl:72
	comma := ""

//line views/templates/json/anyjson.qtpl:73
	for _, value := range arrJSON {
//line views/templates/json/anyjson.qtpl:73
		qw422016.E().S(comma)
//line views/templates/json/anyjson.qtpl:73
		StreamElement(qw422016, value)
//line views/templates/json/anyjson.qtpl:73
		comma = ","

//line views/templates/json/anyjson.qtpl:74
	}
//line views/templates/json/anyjson.qtpl:74
	qw422016.N().S(`]`)
//line views/templates/json/anyjson.qtpl:76
}

//line views/templates/json/anyjson.qtpl:76
func WriteStringDimension(qq422016 qtio422016.Writer, arrJSON stringDimension) {
//line views/templates/json/anyjson.qtpl:76
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/templates/json/anyjson.qtpl:76
	StreamStringDimension(qw422016, arrJSON)
//line views/templates/json/anyjson.qtpl:76
	qt422016.ReleaseWriter(qw422016)
//line views/templates/json/anyjson.qtpl:76
}

//line views/templates/json/anyjson.qtpl:76
func StringDimension(arrJSON stringDimension) string {
//line views/templates/json/anyjson.qtpl:76
	qb422016 := qt422016.AcquireByteBuffer()
//line views/templates/json/anyjson.qtpl:76
	WriteStringDimension(qb422016, arrJSON)
//line views/templates/json/anyjson.qtpl:76
	qs422016 := string(qb422016.B)
//line views/templates/json/anyjson.qtpl:76
	qt422016.ReleaseByteBuffer(qb422016)
//line views/templates/json/anyjson.qtpl:76
	return qs422016
//line views/templates/json/anyjson.qtpl:76
}
