// This file is automatically generated by qtc from "anyjson.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line anyjson.qtpl:1
package json

//line anyjson.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

// All the text outside function templates is treated as comments,
// i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
// выводим массив массивов (основное назначение для таблиц БД)

//line anyjson.qtpl:6
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line anyjson.qtpl:6
func StreamWriteSliceJSON(qw422016 *qt422016.Writer, mapJSON MapMultiDimension) {
	//line anyjson.qtpl:6
	qw422016.N().S(`[`)
	//line anyjson.qtpl:8
	for key, arrJSON := range mapJSON {
		//line anyjson.qtpl:9
		if key > 0 {
			//line anyjson.qtpl:9
			qw422016.N().S(`","`)
			//line anyjson.qtpl:9
		}
		//line anyjson.qtpl:9
		StreamWriteAnyJSON(qw422016, arrJSON)
		//line anyjson.qtpl:10
	}
	//line anyjson.qtpl:10
	qw422016.N().S(`]`)
//line anyjson.qtpl:12
}

//line anyjson.qtpl:12
func WriteWriteSliceJSON(qq422016 qtio422016.Writer, mapJSON MapMultiDimension) {
	//line anyjson.qtpl:12
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyjson.qtpl:12
	StreamWriteSliceJSON(qw422016, mapJSON)
	//line anyjson.qtpl:12
	qt422016.ReleaseWriter(qw422016)
//line anyjson.qtpl:12
}

//line anyjson.qtpl:12
func WriteSliceJSON(mapJSON MapMultiDimension) string {
	//line anyjson.qtpl:12
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyjson.qtpl:12
	WriteWriteSliceJSON(qb422016, mapJSON)
	//line anyjson.qtpl:12
	qs422016 := string(qb422016.B)
	//line anyjson.qtpl:12
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyjson.qtpl:12
	return qs422016
//line anyjson.qtpl:12
}

// получаем объект произвольной формы и возвращаем JSON текстом

//line anyjson.qtpl:15
func StreamWriteAnyJSON(qw422016 *qt422016.Writer, arrJSON MultiDimension) {
	//line anyjson.qtpl:15
	qw422016.N().S(`{`)
	//line anyjson.qtpl:16
	comma := ""

	//line anyjson.qtpl:17
	for key, value := range arrJSON {
		//line anyjson.qtpl:18
		qw422016.E().S(comma)
		//line anyjson.qtpl:18
		qw422016.N().S(`"`)
		//line anyjson.qtpl:18
		qw422016.E().S(key)
		//line anyjson.qtpl:18
		qw422016.N().S(`":`)
		//line anyjson.qtpl:18
		StreamWriteElement(qw422016, value)
		//line anyjson.qtpl:18
		comma = ","

		//line anyjson.qtpl:19
	}
	//line anyjson.qtpl:19
	qw422016.N().S(`}`)
//line anyjson.qtpl:21
}

//line anyjson.qtpl:21
func WriteWriteAnyJSON(qq422016 qtio422016.Writer, arrJSON MultiDimension) {
	//line anyjson.qtpl:21
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyjson.qtpl:21
	StreamWriteAnyJSON(qw422016, arrJSON)
	//line anyjson.qtpl:21
	qt422016.ReleaseWriter(qw422016)
//line anyjson.qtpl:21
}

//line anyjson.qtpl:21
func WriteAnyJSON(arrJSON MultiDimension) string {
	//line anyjson.qtpl:21
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyjson.qtpl:21
	WriteWriteAnyJSON(qb422016, arrJSON)
	//line anyjson.qtpl:21
	qs422016 := string(qb422016.B)
	//line anyjson.qtpl:21
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyjson.qtpl:21
	return qs422016
//line anyjson.qtpl:21
}

// пишем элемент массива в зависемости от типа

//line anyjson.qtpl:23
func StreamWriteElement(qw422016 *qt422016.Writer, value interface{}) {
	//line anyjson.qtpl:24
	switch vv := value.(type) {
	//line anyjson.qtpl:25
	case string:
		//line anyjson.qtpl:25
		qw422016.N().S(`"`)
		//line anyjson.qtpl:25
		qw422016.E().S(vv)
		//line anyjson.qtpl:25
		qw422016.N().S(`"`)
	//line anyjson.qtpl:26
	case bool:
		//line anyjson.qtpl:26
		qw422016.E().V(vv)
	//line anyjson.qtpl:27
	case int, uint, int32, int64:
		//line anyjson.qtpl:27
		qw422016.N().D(vv.(int))
	//line anyjson.qtpl:28
	case float64:
		//line anyjson.qtpl:28
		qw422016.N().F(vv)
	//line anyjson.qtpl:29
	case nil:
		//line anyjson.qtpl:29
		qw422016.N().S(`null`)
	//line anyjson.qtpl:30
	case StringDimension:
		//line anyjson.qtpl:30
		StreamWriteStringDimension(qw422016, vv)
	//line anyjson.qtpl:31
	case SimpleDimension:
		//line anyjson.qtpl:31
		StreamWriteSimpleDimension(qw422016, vv)
	//line anyjson.qtpl:32
	case MultiDimension:
		//line anyjson.qtpl:32
		StreamWriteAnyJSON(qw422016, vv)
	//line anyjson.qtpl:33
	default:
		//line anyjson.qtpl:33
		qw422016.E().V(vv)
		//line anyjson.qtpl:34
	}
//line anyjson.qtpl:35
}

//line anyjson.qtpl:35
func WriteWriteElement(qq422016 qtio422016.Writer, value interface{}) {
	//line anyjson.qtpl:35
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyjson.qtpl:35
	StreamWriteElement(qw422016, value)
	//line anyjson.qtpl:35
	qt422016.ReleaseWriter(qw422016)
//line anyjson.qtpl:35
}

//line anyjson.qtpl:35
func WriteElement(value interface{}) string {
	//line anyjson.qtpl:35
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyjson.qtpl:35
	WriteWriteElement(qb422016, value)
	//line anyjson.qtpl:35
	qs422016 := string(qb422016.B)
	//line anyjson.qtpl:35
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyjson.qtpl:35
	return qs422016
//line anyjson.qtpl:35
}

// получаем массив произвольной формы и возвращаем JSON текстом

//line anyjson.qtpl:37
func StreamWriteArrJSON(qw422016 *qt422016.Writer, arrJSON []interface{}) {
	//line anyjson.qtpl:37
	qw422016.N().S(`[`)
	//line anyjson.qtpl:38
	comma := ""

	//line anyjson.qtpl:39
	for key, value := range arrJSON {
		//line anyjson.qtpl:39
		qw422016.E().S(comma)
		//line anyjson.qtpl:39
		qw422016.N().D(key)
		//line anyjson.qtpl:39
		qw422016.N().S(`:`)
		//line anyjson.qtpl:39
		StreamWriteElement(qw422016, value)
		//line anyjson.qtpl:39
		comma = ","

		//line anyjson.qtpl:40
	}
	//line anyjson.qtpl:40
	qw422016.N().S(`]`)
//line anyjson.qtpl:42
}

//line anyjson.qtpl:42
func WriteWriteArrJSON(qq422016 qtio422016.Writer, arrJSON []interface{}) {
	//line anyjson.qtpl:42
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyjson.qtpl:42
	StreamWriteArrJSON(qw422016, arrJSON)
	//line anyjson.qtpl:42
	qt422016.ReleaseWriter(qw422016)
//line anyjson.qtpl:42
}

//line anyjson.qtpl:42
func WriteArrJSON(arrJSON []interface{}) string {
	//line anyjson.qtpl:42
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyjson.qtpl:42
	WriteWriteArrJSON(qb422016, arrJSON)
	//line anyjson.qtpl:42
	qs422016 := string(qb422016.B)
	//line anyjson.qtpl:42
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyjson.qtpl:42
	return qs422016
//line anyjson.qtpl:42
}

// получаем массив объектов произвольной формы и возвращаем JSON текстом

//line anyjson.qtpl:44
func StreamWriteSimpleDimension(qw422016 *qt422016.Writer, arrJSON SimpleDimension) {
	//line anyjson.qtpl:44
	qw422016.N().S(`[`)
	//line anyjson.qtpl:45
	comma := ""

	//line anyjson.qtpl:46
	for key, value := range arrJSON {
		//line anyjson.qtpl:46
		qw422016.E().S(comma)
		//line anyjson.qtpl:46
		qw422016.N().D(key)
		//line anyjson.qtpl:46
		qw422016.N().S(`:`)
		//line anyjson.qtpl:46
		StreamWriteElement(qw422016, value)
		//line anyjson.qtpl:46
		comma = ","

		//line anyjson.qtpl:47
	}
	//line anyjson.qtpl:47
	qw422016.N().S(`]`)
//line anyjson.qtpl:49
}

//line anyjson.qtpl:49
func WriteWriteSimpleDimension(qq422016 qtio422016.Writer, arrJSON SimpleDimension) {
	//line anyjson.qtpl:49
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyjson.qtpl:49
	StreamWriteSimpleDimension(qw422016, arrJSON)
	//line anyjson.qtpl:49
	qt422016.ReleaseWriter(qw422016)
//line anyjson.qtpl:49
}

//line anyjson.qtpl:49
func WriteSimpleDimension(arrJSON SimpleDimension) string {
	//line anyjson.qtpl:49
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyjson.qtpl:49
	WriteWriteSimpleDimension(qb422016, arrJSON)
	//line anyjson.qtpl:49
	qs422016 := string(qb422016.B)
	//line anyjson.qtpl:49
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyjson.qtpl:49
	return qs422016
//line anyjson.qtpl:49
}

// получаем массив строк и возвращаем JSON текстом

//line anyjson.qtpl:51
func StreamWriteStringDimension(qw422016 *qt422016.Writer, arrJSON StringDimension) {
	//line anyjson.qtpl:51
	qw422016.N().S(`[`)
	//line anyjson.qtpl:52
	comma := ""

	//line anyjson.qtpl:53
	for key, value := range arrJSON {
		//line anyjson.qtpl:53
		qw422016.E().S(comma)
		//line anyjson.qtpl:53
		qw422016.N().D(key)
		//line anyjson.qtpl:53
		qw422016.N().S(`:`)
		//line anyjson.qtpl:53
		StreamWriteElement(qw422016, value)
		//line anyjson.qtpl:53
		comma = ","

		//line anyjson.qtpl:54
	}
	//line anyjson.qtpl:54
	qw422016.N().S(`]`)
//line anyjson.qtpl:56
}

//line anyjson.qtpl:56
func WriteWriteStringDimension(qq422016 qtio422016.Writer, arrJSON StringDimension) {
	//line anyjson.qtpl:56
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyjson.qtpl:56
	StreamWriteStringDimension(qw422016, arrJSON)
	//line anyjson.qtpl:56
	qt422016.ReleaseWriter(qw422016)
//line anyjson.qtpl:56
}

//line anyjson.qtpl:56
func WriteStringDimension(arrJSON StringDimension) string {
	//line anyjson.qtpl:56
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyjson.qtpl:56
	WriteWriteStringDimension(qb422016, arrJSON)
	//line anyjson.qtpl:56
	qs422016 := string(qb422016.B)
	//line anyjson.qtpl:56
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyjson.qtpl:56
	return qs422016
//line anyjson.qtpl:56
}
