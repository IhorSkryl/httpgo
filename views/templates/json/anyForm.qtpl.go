// This file is automatically generated by qtc from "anyForm.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line anyForm.qtpl:1
package json

//line anyForm.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

// Copyright 2017 Author: Ruslan Bikchentaev. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//

//line anyForm.qtpl:5
import (
	"github.com/ruslanBik4/httpgo/models/db"
	"github.com/ruslanBik4/httpgo/views/templates/forms"
	"strings"
)

// Формируем JSON, который затем будет использован в форме на клиенте
// dataJson и содержимое AddJson вставляются КАК ЕСТЬ, ПОТОМУ ЧТО БЫЛИ ОБРАБОТАНЫ РАНЕЕ!!!

//line anyForm.qtpl:14
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line anyForm.qtpl:14
func StreamCheckFields(qw422016 *qt422016.Writer, ns *forms.FieldsTable) {
	//line anyForm.qtpl:16
	for _, field := range ns.Rows {
		//line anyForm.qtpl:20
		titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
		typeInput := field.TypeInput()

		//line anyForm.qtpl:22
		qw422016.N().S(`"`)
		//line anyForm.qtpl:23
		qw422016.E().S(field.COLUMN_NAME)
		//line anyForm.qtpl:23
		qw422016.N().S(`": {`)
		//line anyForm.qtpl:24
		if field.IS_NULLABLE == "NO" {
			//line anyForm.qtpl:24
			qw422016.N().S(`"required": true,`)
			//line anyForm.qtpl:24
		}
		//line anyForm.qtpl:25
		if titleFull > "" {
			//line anyForm.qtpl:25
			qw422016.N().S(`"title": "`)
			//line anyForm.qtpl:25
			qw422016.E().J(titleFull)
			//line anyForm.qtpl:25
			qw422016.N().S(`",`)
			//line anyForm.qtpl:25
		}
		//line anyForm.qtpl:26
		if titleLabel > "" {
			//line anyForm.qtpl:26
			qw422016.N().S(`"label": "`)
			//line anyForm.qtpl:26
			qw422016.E().J(titleLabel)
			//line anyForm.qtpl:26
			qw422016.N().S(`",`)
			//line anyForm.qtpl:26
		}
		//line anyForm.qtpl:27
		if placeholder > "" {
			//line anyForm.qtpl:27
			qw422016.N().S(`"placeholder": "`)
			//line anyForm.qtpl:27
			qw422016.E().S(placeholder)
			//line anyForm.qtpl:27
			qw422016.N().S(`",`)
			//line anyForm.qtpl:27
		}
		//line anyForm.qtpl:28
		if pattern > "" {
			//line anyForm.qtpl:28
			qw422016.N().S(`"pattern": "`)
			//line anyForm.qtpl:28
			qw422016.E().J(pattern)
			//line anyForm.qtpl:28
			qw422016.N().S(`",`)
			//line anyForm.qtpl:28
		}
		//line anyForm.qtpl:29
		if dataJson > "" {
			//line anyForm.qtpl:29
			qw422016.N().S(dataJson)
			//line anyForm.qtpl:29
			qw422016.N().S(`,`)
			//line anyForm.qtpl:29
		}
		//line anyForm.qtpl:30
		if field.Value > "" {
			//line anyForm.qtpl:30
			qw422016.N().S(`"value": "`)
			//line anyForm.qtpl:30
			qw422016.E().S(field.Value)
			//line anyForm.qtpl:30
			qw422016.N().S(`",`)
			//line anyForm.qtpl:30
		}
		//line anyForm.qtpl:31
		if field.CSSClass > "" {
			//line anyForm.qtpl:31
			qw422016.N().S(`"CSSClass": "`)
			//line anyForm.qtpl:31
			qw422016.E().S(field.CSSClass)
			//line anyForm.qtpl:31
			qw422016.N().S(`",`)
			//line anyForm.qtpl:31
		}
		//line anyForm.qtpl:32
		if field.CSSStyle > "" {
			//line anyForm.qtpl:32
			qw422016.N().S(`"CSSStyle": "`)
			//line anyForm.qtpl:32
			qw422016.E().S(field.CSSStyle)
			//line anyForm.qtpl:32
			qw422016.N().S(`",`)
			//line anyForm.qtpl:32
		}
		//line anyForm.qtpl:33
		if field.Figure > "" {
			//line anyForm.qtpl:33
			qw422016.N().S(`"Figure": "`)
			//line anyForm.qtpl:33
			qw422016.E().S(field.Figure)
			//line anyForm.qtpl:33
			qw422016.N().S(`",`)
			//line anyForm.qtpl:33
		}
		//line anyForm.qtpl:34
		if field.CHARACTER_MAXIMUM_LENGTH > 0 {
			//line anyForm.qtpl:34
			qw422016.N().S(`"maxLength":`)
			//line anyForm.qtpl:34
			qw422016.N().D(field.CHARACTER_MAXIMUM_LENGTH)
			//line anyForm.qtpl:34
			qw422016.N().S(`,`)
			//line anyForm.qtpl:34
		}
		//line anyForm.qtpl:35
		if strings.Contains(field.COLUMN_TYPE, "unsigned") {
			//line anyForm.qtpl:35
			qw422016.N().S(`"min":0,`)
			//line anyForm.qtpl:35
		}
		//line anyForm.qtpl:36
		if field.MinDate > "" {
			//line anyForm.qtpl:36
			qw422016.N().S(`"minDate": "`)
			//line anyForm.qtpl:36
			qw422016.E().S(field.MinDate)
			//line anyForm.qtpl:36
			qw422016.N().S(`",`)
			//line anyForm.qtpl:36
		}
		//line anyForm.qtpl:37
		if field.MaxDate > "" {
			//line anyForm.qtpl:37
			qw422016.N().S(`"maxDate": "`)
			//line anyForm.qtpl:37
			qw422016.E().S(field.MaxDate)
			//line anyForm.qtpl:37
			qw422016.N().S(`",`)
			//line anyForm.qtpl:37
		}
		//line anyForm.qtpl:38
		if len(field.Events) > 0 {
			//line anyForm.qtpl:38
			qw422016.N().S(`"Events": {`)
			//line anyForm.qtpl:40
			for name, funcName := range field.Events {
				//line anyForm.qtpl:40
				qw422016.N().S(`"`)
				//line anyForm.qtpl:41
				qw422016.E().S(name)
				//line anyForm.qtpl:41
				qw422016.N().S(`": "`)
				//line anyForm.qtpl:41
				qw422016.E().S(funcName)
				//line anyForm.qtpl:41
				qw422016.N().S(`",`)
				//line anyForm.qtpl:42
			}
			//line anyForm.qtpl:42
			qw422016.N().S(`"count":`)
			//line anyForm.qtpl:43
			qw422016.N().D(len(field.Events))
			//line anyForm.qtpl:43
			qw422016.N().S(`},`)
			//line anyForm.qtpl:45
		}
		//line anyForm.qtpl:46
		if len(field.EnumValues) > 0 {
			//line anyForm.qtpl:46
			qw422016.N().S(`"EnumValues": [`)
			//line anyForm.qtpl:47
			for i, val := range field.EnumValues {
				//line anyForm.qtpl:47
				if i > 0 {
					//line anyForm.qtpl:47
					qw422016.N().S(`,`)
					//line anyForm.qtpl:47
				}
				//line anyForm.qtpl:47
				qw422016.N().S(`"`)
				//line anyForm.qtpl:47
				qw422016.E().S(val)
				//line anyForm.qtpl:47
				qw422016.N().S(`"`)
				//line anyForm.qtpl:47
			}
			//line anyForm.qtpl:47
			qw422016.N().S(`],`)
			//line anyForm.qtpl:48
		}
		//line anyForm.qtpl:49
		if field.COLUMN_DEFAULT > "" {
			//line anyForm.qtpl:49
			qw422016.N().S(`"default": "`)
			//line anyForm.qtpl:49
			qw422016.E().S(field.COLUMN_DEFAULT)
			//line anyForm.qtpl:49
			qw422016.N().S(`",`)
			//line anyForm.qtpl:49
		}
		//line anyForm.qtpl:50
		if field.CHARACTER_SET_NAME > "" {
			//line anyForm.qtpl:50
			qw422016.N().S(`"charSet": "`)
			//line anyForm.qtpl:50
			qw422016.E().S(field.CHARACTER_SET_NAME)
			//line anyForm.qtpl:50
			qw422016.N().S(`",`)
			//line anyForm.qtpl:50
		}
		//line anyForm.qtpl:50
		qw422016.N().S(`"type": "`)
		//line anyForm.qtpl:51
		qw422016.E().S(typeInput)
		//line anyForm.qtpl:51
		qw422016.N().S(`"`)
		//line anyForm.qtpl:53
		if strings.HasPrefix(field.COLUMN_NAME, "id_") {
			//line anyForm.qtpl:53
			qw422016.N().S(`,`)
			//line anyForm.qtpl:56
			resultTable := field.COLUMN_NAME[3:]

			field.GetOptionsJson(resultTable)

			//line anyForm.qtpl:59
			qw422016.N().S(`"children":{`)
			//line anyForm.qtpl:60
			qw422016.N().S(field.Html)
			//line anyForm.qtpl:60
			qw422016.N().S(`}`)
			//line anyForm.qtpl:62
		} else if strings.HasPrefix(field.COLUMN_NAME, "setid_") || strings.HasPrefix(field.COLUMN_NAME, "nodeid_") {
			//line anyForm.qtpl:62
			qw422016.N().S(`,`)
			//line anyForm.qtpl:64
			resultTable := field.COLUMN_NAME[6:]

			field.GetOptionsJson(resultTable)

			//line anyForm.qtpl:67
			qw422016.N().S(`"children":{`)
			//line anyForm.qtpl:68
			qw422016.N().S(field.Html)
			//line anyForm.qtpl:68
			qw422016.N().S(`}`)
			//line anyForm.qtpl:70
		} else if strings.HasPrefix(field.COLUMN_NAME, "tableid_") {
			//line anyForm.qtpl:70
			qw422016.N().S(`,`)
			//line anyForm.qtpl:72
			resultTable := field.COLUMN_NAME[8:]

			var fields forms.FieldsTable
			var nx db.FieldsTable
			nx.Options.GetTableProp(resultTable)
			nx.GetColumnsProp(resultTable)

			fields.Name = resultTable

			fields.PutDataFrom(nx)

			for childKey, childFields := range fields.Rows {
				if strings.HasPrefix(childFields.COLUMN_NAME, "id_") {

					fields.Rows = append(fields.Rows[:childKey], fields.Rows[childKey+1:]...)
					break
				}
			}

			//line anyForm.qtpl:90
			qw422016.N().S(`"children":{`)
			//line anyForm.qtpl:91
			StreamCheckFields(qw422016, &fields)
			//line anyForm.qtpl:91
			qw422016.N().S(`}`)
			//line anyForm.qtpl:93
		}
		//line anyForm.qtpl:93
		qw422016.N().S(`},`)
		//line anyForm.qtpl:96
	}
	//line anyForm.qtpl:96
	qw422016.N().S(`"count":`)
	//line anyForm.qtpl:97
	qw422016.N().D(len(ns.Rows))
//line anyForm.qtpl:99
}

//line anyForm.qtpl:99
func WriteCheckFields(qq422016 qtio422016.Writer, ns *forms.FieldsTable) {
	//line anyForm.qtpl:99
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyForm.qtpl:99
	StreamCheckFields(qw422016, ns)
	//line anyForm.qtpl:99
	qt422016.ReleaseWriter(qw422016)
//line anyForm.qtpl:99
}

//line anyForm.qtpl:99
func CheckFields(ns *forms.FieldsTable) string {
	//line anyForm.qtpl:99
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyForm.qtpl:99
	WriteCheckFields(qb422016, ns)
	//line anyForm.qtpl:99
	qs422016 := string(qb422016.B)
	//line anyForm.qtpl:99
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyForm.qtpl:99
	return qs422016
//line anyForm.qtpl:99
}

//line anyForm.qtpl:102
func (thisForm *FormStructure) StreamJSONAnyForm(qw422016 *qt422016.Writer, ns *forms.FieldsTable, AddJson map[string]string) {
	//line anyForm.qtpl:104
	thisForm.setFormDefaults(ns)
	if _, ok := ns.SaveFormEvents["errorFunction"]; !ok {
		ns.SaveFormEvents["errorFunction"] = ""
	}

	//line anyForm.qtpl:108
	qw422016.N().S(`{"fields": {`)
	//line anyForm.qtpl:111
	StreamCheckFields(qw422016, ns)
	//line anyForm.qtpl:111
	qw422016.N().S(`},"form": {`)
	//line anyForm.qtpl:115
	if thisForm.ClassCSS != "" {
		//line anyForm.qtpl:115
		qw422016.N().S(`"class" : "`)
		//line anyForm.qtpl:115
		qw422016.N().S(thisForm.ClassCSS)
		//line anyForm.qtpl:115
		qw422016.N().S(`",`)
		//line anyForm.qtpl:115
	}
	//line anyForm.qtpl:115
	qw422016.N().S(`"action" : "`)
	//line anyForm.qtpl:116
	qw422016.N().S(thisForm.Action)
	//line anyForm.qtpl:116
	qw422016.N().S(`","id" : "`)
	//line anyForm.qtpl:117
	qw422016.N().S(thisForm.IdCSS)
	//line anyForm.qtpl:117
	qw422016.N().S(`","name": "`)
	//line anyForm.qtpl:118
	qw422016.N().S(thisForm.Name)
	//line anyForm.qtpl:118
	qw422016.N().S(`"`)
	//line anyForm.qtpl:119
	for name, event := range thisForm.Events {
		//line anyForm.qtpl:119
		qw422016.N().S(`,"`)
		//line anyForm.qtpl:120
		qw422016.E().S(name)
		//line anyForm.qtpl:120
		qw422016.N().S(`": "`)
		//line anyForm.qtpl:120
		qw422016.N().S(event)
		//line anyForm.qtpl:120
		qw422016.N().S(`"`)
		//line anyForm.qtpl:121
	}
	//line anyForm.qtpl:121
	qw422016.N().S(`}`)
	//line anyForm.qtpl:123
	for name, val := range AddJson {
		//line anyForm.qtpl:123
		qw422016.N().S(`,"`)
		//line anyForm.qtpl:124
		qw422016.E().S(name)
		//line anyForm.qtpl:124
		qw422016.N().S(`":`)
		//line anyForm.qtpl:124
		qw422016.N().S(val)
		//line anyForm.qtpl:125
	}
	//line anyForm.qtpl:125
	qw422016.N().S(`}`)
//line anyForm.qtpl:128
}

//line anyForm.qtpl:128
func (thisForm *FormStructure) WriteJSONAnyForm(qq422016 qtio422016.Writer, ns *forms.FieldsTable, AddJson map[string]string) {
	//line anyForm.qtpl:128
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyForm.qtpl:128
	thisForm.StreamJSONAnyForm(qw422016, ns, AddJson)
	//line anyForm.qtpl:128
	qt422016.ReleaseWriter(qw422016)
//line anyForm.qtpl:128
}

//line anyForm.qtpl:128
func (thisForm *FormStructure) JSONAnyForm(ns *forms.FieldsTable, AddJson map[string]string) string {
	//line anyForm.qtpl:128
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyForm.qtpl:128
	thisForm.WriteJSONAnyForm(qb422016, ns, AddJson)
	//line anyForm.qtpl:128
	qs422016 := string(qb422016.B)
	//line anyForm.qtpl:128
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyForm.qtpl:128
	return qs422016
//line anyForm.qtpl:128
}
