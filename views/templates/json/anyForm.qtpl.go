// This file is automatically generated by qtc from "anyForm.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line anyForm.qtpl:1
package json

//line anyForm.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

// Copyright 2017 Author: Ruslan Bikchentaev. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//

//line anyForm.qtpl:5
import (
	"github.com/ruslanBik4/httpgo/models/db"
	"github.com/ruslanBik4/httpgo/views/templates/forms"
	"strings"
)

// Формируем JSON, который затем будет использован в форме на клиенте
// dataJson и содержимое AddJson вставляются КАК ЕСТЬ, ПОТОМУ ЧТО БЫЛИ ОБРАБОТАНЫ РАНЕЕ!!!

//line anyForm.qtpl:14
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line anyForm.qtpl:14
func StreamCheckFields(qw422016 *qt422016.Writer, ns *forms.FieldsTable) {
	//line anyForm.qtpl:16
	for _, field := range ns.Rows {
		//line anyForm.qtpl:20
		titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
		typeInput := field.TypeInput()

		//line anyForm.qtpl:22
		qw422016.N().S(`"`)
		//line anyForm.qtpl:23
		qw422016.E().S(field.COLUMN_NAME)
		//line anyForm.qtpl:23
		qw422016.N().S(`": {`)
		//line anyForm.qtpl:24
		if (field.COLUMN_NAME == "id") || field.IsHidden {
			//line anyForm.qtpl:24
			qw422016.N().S(`"type": "hidden" },`)
			//line anyForm.qtpl:26
			continue
			//line anyForm.qtpl:27
		}
		//line anyForm.qtpl:29
		if field.IS_NULLABLE == "NO" {
			//line anyForm.qtpl:29
			qw422016.N().S(`"required": true,`)
			//line anyForm.qtpl:29
		}
		//line anyForm.qtpl:30
		if titleFull > "" {
			//line anyForm.qtpl:30
			qw422016.N().S(`"title": "`)
			//line anyForm.qtpl:30
			qw422016.E().J(titleFull)
			//line anyForm.qtpl:30
			qw422016.N().S(`",`)
			//line anyForm.qtpl:30
		}
		//line anyForm.qtpl:31
		if titleLabel > "" {
			//line anyForm.qtpl:31
			qw422016.N().S(`"label": "`)
			//line anyForm.qtpl:31
			qw422016.E().J(titleLabel)
			//line anyForm.qtpl:31
			qw422016.N().S(`",`)
			//line anyForm.qtpl:31
		}
		//line anyForm.qtpl:32
		if placeholder > "" {
			//line anyForm.qtpl:32
			qw422016.N().S(`"placeholder": "`)
			//line anyForm.qtpl:32
			qw422016.E().S(placeholder)
			//line anyForm.qtpl:32
			qw422016.N().S(`",`)
			//line anyForm.qtpl:32
		}
		//line anyForm.qtpl:33
		if pattern > "" {
			//line anyForm.qtpl:33
			qw422016.N().S(`"pattern": "`)
			//line anyForm.qtpl:33
			qw422016.E().J(pattern)
			//line anyForm.qtpl:33
			qw422016.N().S(`",`)
			//line anyForm.qtpl:33
		}
		//line anyForm.qtpl:34
		if dataJson > "" {
			//line anyForm.qtpl:34
			qw422016.N().S(dataJson)
			//line anyForm.qtpl:34
			qw422016.N().S(`,`)
			//line anyForm.qtpl:34
		}
		//line anyForm.qtpl:35
		if field.Value > "" {
			//line anyForm.qtpl:35
			qw422016.N().S(`"value": "`)
			//line anyForm.qtpl:35
			qw422016.E().S(field.Value)
			//line anyForm.qtpl:35
			qw422016.N().S(`",`)
			//line anyForm.qtpl:35
		}
		//line anyForm.qtpl:36
		if field.CSSClass > "" {
			//line anyForm.qtpl:36
			qw422016.N().S(`"CSSClass": "`)
			//line anyForm.qtpl:36
			qw422016.E().S(field.CSSClass)
			//line anyForm.qtpl:36
			qw422016.N().S(`",`)
			//line anyForm.qtpl:36
		}
		//line anyForm.qtpl:37
		if field.CSSStyle > "" {
			//line anyForm.qtpl:37
			qw422016.N().S(`"CSSStyle": "`)
			//line anyForm.qtpl:37
			qw422016.E().S(field.CSSStyle)
			//line anyForm.qtpl:37
			qw422016.N().S(`",`)
			//line anyForm.qtpl:37
		}
		//line anyForm.qtpl:38
		if field.Figure > "" {
			//line anyForm.qtpl:38
			qw422016.N().S(`"Figure": "`)
			//line anyForm.qtpl:38
			qw422016.E().S(field.Figure)
			//line anyForm.qtpl:38
			qw422016.N().S(`",`)
			//line anyForm.qtpl:38
		}
		//line anyForm.qtpl:39
		if field.CHARACTER_MAXIMUM_LENGTH > 0 {
			//line anyForm.qtpl:39
			qw422016.N().S(`"maxLength":`)
			//line anyForm.qtpl:39
			qw422016.N().D(field.CHARACTER_MAXIMUM_LENGTH)
			//line anyForm.qtpl:39
			qw422016.N().S(`,`)
			//line anyForm.qtpl:39
		}
		//line anyForm.qtpl:40
		if strings.Contains(field.COLUMN_TYPE, "unsigned") {
			//line anyForm.qtpl:40
			qw422016.N().S(`"min":0,`)
			//line anyForm.qtpl:40
		}
		//line anyForm.qtpl:41
		if field.MinDate > "" {
			//line anyForm.qtpl:41
			qw422016.N().S(`"minDate": "`)
			//line anyForm.qtpl:41
			qw422016.E().S(field.MinDate)
			//line anyForm.qtpl:41
			qw422016.N().S(`",`)
			//line anyForm.qtpl:41
		}
		//line anyForm.qtpl:42
		if field.MaxDate > "" {
			//line anyForm.qtpl:42
			qw422016.N().S(`"maxDate": "`)
			//line anyForm.qtpl:42
			qw422016.E().S(field.MaxDate)
			//line anyForm.qtpl:42
			qw422016.N().S(`",`)
			//line anyForm.qtpl:42
		}
		//line anyForm.qtpl:43
		if len(field.Events) > 0 {
			//line anyForm.qtpl:43
			qw422016.N().S(`"Events": {`)
			//line anyForm.qtpl:45
			for name, funcName := range field.Events {
				//line anyForm.qtpl:45
				qw422016.N().S(`"`)
				//line anyForm.qtpl:46
				qw422016.E().S(name)
				//line anyForm.qtpl:46
				qw422016.N().S(`": "`)
				//line anyForm.qtpl:46
				qw422016.E().S(funcName)
				//line anyForm.qtpl:46
				qw422016.N().S(`",`)
				//line anyForm.qtpl:47
			}
			//line anyForm.qtpl:47
			qw422016.N().S(`"count":`)
			//line anyForm.qtpl:48
			qw422016.N().D(len(field.Events))
			//line anyForm.qtpl:48
			qw422016.N().S(`},`)
			//line anyForm.qtpl:50
		}
		//line anyForm.qtpl:51
		if len(field.EnumValues) > 0 {
			//line anyForm.qtpl:51
			qw422016.N().S(`"list": [`)
			//line anyForm.qtpl:52
			for i, val := range field.EnumValues {
				//line anyForm.qtpl:52
				if i > 0 {
					//line anyForm.qtpl:52
					qw422016.N().S(`,`)
					//line anyForm.qtpl:52
				}
				//line anyForm.qtpl:52
				qw422016.N().S(`"`)
				//line anyForm.qtpl:52
				qw422016.E().S(val)
				//line anyForm.qtpl:52
				qw422016.N().S(`"`)
				//line anyForm.qtpl:52
			}
			//line anyForm.qtpl:52
			qw422016.N().S(`],`)
			//line anyForm.qtpl:53
		}
		//line anyForm.qtpl:54
		if field.COLUMN_DEFAULT > "" {
			//line anyForm.qtpl:54
			qw422016.N().S(`"default": "`)
			//line anyForm.qtpl:54
			qw422016.E().S(field.COLUMN_DEFAULT)
			//line anyForm.qtpl:54
			qw422016.N().S(`",`)
			//line anyForm.qtpl:54
		}
		//line anyForm.qtpl:55
		if field.CHARACTER_SET_NAME > "" {
			//line anyForm.qtpl:55
			qw422016.N().S(`"charSet": "`)
			//line anyForm.qtpl:55
			qw422016.E().S(field.CHARACTER_SET_NAME)
			//line anyForm.qtpl:55
			qw422016.N().S(`",`)
			//line anyForm.qtpl:55
		}
		//line anyForm.qtpl:55
		qw422016.N().S(`"type": "`)
		//line anyForm.qtpl:56
		qw422016.E().S(typeInput)
		//line anyForm.qtpl:56
		qw422016.N().S(`"`)
		//line anyForm.qtpl:58
		if strings.HasPrefix(field.COLUMN_NAME, "id_") {
			//line anyForm.qtpl:58
			qw422016.N().S(`,`)
			//line anyForm.qtpl:61
			field.GetOptionsJson(field.COLUMN_NAME[3:])

			//line anyForm.qtpl:62
			qw422016.N().S(`"list":{`)
			//line anyForm.qtpl:63
			qw422016.N().S(field.Html)
			//line anyForm.qtpl:63
			qw422016.N().S(`}`)
			//line anyForm.qtpl:65
		} else if strings.HasPrefix(field.COLUMN_NAME, "setid_") || strings.HasPrefix(field.COLUMN_NAME, "nodeid_") {
			//line anyForm.qtpl:65
			qw422016.N().S(`,`)
			//line anyForm.qtpl:68
			field.GetOptionsJson(field.COLUMN_NAME[6:])

			//line anyForm.qtpl:69
			qw422016.N().S(`"list":{`)
			//line anyForm.qtpl:70
			qw422016.N().S(field.Html)
			//line anyForm.qtpl:70
			qw422016.N().S(`}`)
			//line anyForm.qtpl:72
		} else if strings.HasPrefix(field.COLUMN_NAME, "tableid_") {
			//line anyForm.qtpl:72
			qw422016.N().S(`,`)
			//line anyForm.qtpl:76
			var fields forms.FieldsTable
			var nx db.FieldsTable

			fields.Name = field.COLUMN_NAME[8:]
			nx.Options.GetTableProp(fields.Name)
			nx.GetColumnsProp(fields.Name)

			fields.PutDataFrom(nx)

			for childKey, childFields := range fields.Rows {
				if strings.HasPrefix(childFields.COLUMN_NAME, "id_") && childFields.COLUMN_NAME[3:] == field.Table.Name {

					fields.Rows = append(fields.Rows[:childKey], fields.Rows[childKey+1:]...)
					break
				}
			}

			//line anyForm.qtpl:92
			qw422016.N().S(`"list": {`)
			//line anyForm.qtpl:93
			StreamCheckFields(qw422016, &fields)
			//line anyForm.qtpl:93
			qw422016.N().S(`}`)
			//line anyForm.qtpl:94
		}
		//line anyForm.qtpl:94
		qw422016.N().S(`},`)
		//line anyForm.qtpl:97
	}
	//line anyForm.qtpl:97
	qw422016.N().S(`"count":`)
	//line anyForm.qtpl:98
	qw422016.N().D(len(ns.Rows))
//line anyForm.qtpl:100
}

//line anyForm.qtpl:100
func WriteCheckFields(qq422016 qtio422016.Writer, ns *forms.FieldsTable) {
	//line anyForm.qtpl:100
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyForm.qtpl:100
	StreamCheckFields(qw422016, ns)
	//line anyForm.qtpl:100
	qt422016.ReleaseWriter(qw422016)
//line anyForm.qtpl:100
}

//line anyForm.qtpl:100
func CheckFields(ns *forms.FieldsTable) string {
	//line anyForm.qtpl:100
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyForm.qtpl:100
	WriteCheckFields(qb422016, ns)
	//line anyForm.qtpl:100
	qs422016 := string(qb422016.B)
	//line anyForm.qtpl:100
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyForm.qtpl:100
	return qs422016
//line anyForm.qtpl:100
}

//line anyForm.qtpl:103
func (thisForm *FormStructure) StreamJSONAnyForm(qw422016 *qt422016.Writer, ns *forms.FieldsTable, AddJson map[string]string) {
	//line anyForm.qtpl:105
	thisForm.setFormDefaults(ns)

	//line anyForm.qtpl:106
	qw422016.N().S(`{"fields": {`)
	//line anyForm.qtpl:109
	StreamCheckFields(qw422016, ns)
	//line anyForm.qtpl:109
	qw422016.N().S(`},"form": {`)
	//line anyForm.qtpl:113
	if thisForm.ClassCSS != "" {
		//line anyForm.qtpl:113
		qw422016.N().S(`"class" : "`)
		//line anyForm.qtpl:113
		qw422016.N().S(thisForm.ClassCSS)
		//line anyForm.qtpl:113
		qw422016.N().S(`",`)
		//line anyForm.qtpl:113
	}
	//line anyForm.qtpl:113
	qw422016.N().S(`"action" : "`)
	//line anyForm.qtpl:114
	qw422016.N().S(thisForm.Action)
	//line anyForm.qtpl:114
	qw422016.N().S(`","id" : "`)
	//line anyForm.qtpl:115
	qw422016.N().S(thisForm.IdCSS)
	//line anyForm.qtpl:115
	qw422016.N().S(`","name": "`)
	//line anyForm.qtpl:116
	qw422016.N().S(thisForm.Name)
	//line anyForm.qtpl:116
	qw422016.N().S(`"`)
	//line anyForm.qtpl:117
	for name, event := range thisForm.Events {
		//line anyForm.qtpl:117
		qw422016.N().S(`,"`)
		//line anyForm.qtpl:118
		qw422016.E().S(name)
		//line anyForm.qtpl:118
		qw422016.N().S(`": "`)
		//line anyForm.qtpl:118
		qw422016.N().S(event)
		//line anyForm.qtpl:118
		qw422016.N().S(`"`)
		//line anyForm.qtpl:119
	}
	//line anyForm.qtpl:119
	qw422016.N().S(`}`)
	//line anyForm.qtpl:121
	for name, val := range AddJson {
		//line anyForm.qtpl:121
		qw422016.N().S(`,"`)
		//line anyForm.qtpl:122
		qw422016.E().S(name)
		//line anyForm.qtpl:122
		qw422016.N().S(`":`)
		//line anyForm.qtpl:122
		qw422016.N().S(val)
		//line anyForm.qtpl:123
	}
	//line anyForm.qtpl:123
	qw422016.N().S(`}`)
//line anyForm.qtpl:126
}

//line anyForm.qtpl:126
func (thisForm *FormStructure) WriteJSONAnyForm(qq422016 qtio422016.Writer, ns *forms.FieldsTable, AddJson map[string]string) {
	//line anyForm.qtpl:126
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line anyForm.qtpl:126
	thisForm.StreamJSONAnyForm(qw422016, ns, AddJson)
	//line anyForm.qtpl:126
	qt422016.ReleaseWriter(qw422016)
//line anyForm.qtpl:126
}

//line anyForm.qtpl:126
func (thisForm *FormStructure) JSONAnyForm(ns *forms.FieldsTable, AddJson map[string]string) string {
	//line anyForm.qtpl:126
	qb422016 := qt422016.AcquireByteBuffer()
	//line anyForm.qtpl:126
	thisForm.WriteJSONAnyForm(qb422016, ns, AddJson)
	//line anyForm.qtpl:126
	qs422016 := string(qb422016.B)
	//line anyForm.qtpl:126
	qt422016.ReleaseByteBuffer(qb422016)
	//line anyForm.qtpl:126
	return qs422016
//line anyForm.qtpl:126
}
