// Copyright 2017 Author: Ruslan Bikchentaev. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{% import (
	"github.com/ruslanBik4/httpgo/views/templates/forms"
    "strings"
) %}
{%code
type FormStructure struct {
    Action          string
    ClassCSS        string
    IdCSS           string
    Onload          string
    Name            string
    Events          map[string] string
}
%}

Формируем JSON, который затем будет использован в форме на клиенте
dataJson и содержимое AddJson вставляются КАК ЕСТЬ, ПОТОМУ ЧТО БЫЛИ ОБРАБОТАНЫ РАНЕЕ!!!
{% stripspace %}
{% func (thisForm *FormStructure) JSONAnyForm(ns *forms.FieldsTable, AddJson map[string] string) %}
{%code
   thisForm.setFormDefaults(ns)
    if _, ok := ns.SaveFormEvents["errorFunction"]; !ok {
        ns.SaveFormEvents["errorFunction"] = ""
    }
%}
{
 "fields": {
    {% for _, field := range ns.Rows %}
         {% code
            titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
            typeInput := field.TypeInput()
        %}
       "{%s field.COLUMN_NAME %}": {
            {% if field.IS_NULLABLE=="NO" %} "required": true, {% endif %}
            {% if titleFull > "" %} "title": "{%j titleFull %}", {% endif %}
            {% if titleLabel > "" %} "label": "{%j titleLabel %}", {% endif %}
            {% if placeholder > "" %} "placeholder": "{%s placeholder %}", {% endif %}
            {% if pattern > "" %} "pattern": "{%j pattern %}", {% endif %}
            {% if dataJson > "" %} {%s= dataJson %}, {% endif %}
            {% if field.Value > "" %} "value": "{%s field.Value %}", {% endif %}
            {% if field.CSSClass > "" %}"CSSClass": "{%s field.CSSClass %}",{% endif %}
            {% if field.CSSStyle > "" %}"CSSStyle": "{%s field.CSSStyle %}",{% endif %}
            {% if field.Figure > "" %}"Figure": "{%s field.Figure %}",      {% endif %}
            {% if field.CHARACTER_MAXIMUM_LENGTH>0 %} "maxlength":{%d field.CHARACTER_MAXIMUM_LENGTH %}, {% endif %}
            {% if strings.Contains(field.COLUMN_TYPE, "unsigned") %}"min":0,{% endif %}
            {% if field.MinDate > "" %} "minDate": "{%s field.MinDate %}",  {% endif %}
            {% if field.MaxDate > "" %} "maxDate": "{%s field.MaxDate %}",  {% endif %}
            {% if len(field.Events) > 0 %}
                "Events": {
                            {% for name, funcName := range field.Events %}
                                "{%s name %}": "{%s funcName %}",
                            {% endfor %}
                            "count": {%d len(field.Events) %}
                            },
            {% endif %}
            {% if len(field.EnumValues) > 0 %}
                "EnumValues": [{% for i, val := range field.EnumValues %}{% if i>0 %},{% endif %}"{%s val %}"{% endfor %}],
            {% endif %}
            {% if field.COLUMN_DEFAULT > "" %}"COLUMN_DEFAULT": "{%s field.COLUMN_DEFAULT %}",{% endif %}
            {% if field.CHARACTER_SET_NAME > "" %}"CHARACTER_SET_NAME": "{%s field.CHARACTER_SET_NAME %}",{% endif %}
            "type": "{%s typeInput %}"
        },
    {% endfor %}
    "count": {%d len(ns.Rows) %}
}, "form": { "onsubmit": "return saveForm(this, {%s= thisForm.Events[`successSaveForm`] %});",
               "action" : "{%s= thisForm.Action %}",
               "id" : "{%s= thisForm.IdCSS %}",
               "onload": "{%s= thisForm.Onload %}",
               "name": "{%s= thisForm.Name %}",
               {% if thisForm.ClassCSS != "" %} "class" : "{%s= thisForm.ClassCSS %}", {% endif %}
               "oninput": "formInput(this);", "onreset": "formReset(this);"
   }
    {% for name, val := range AddJson %}
        ,"{%s name %}": {%s= val %}
    {% endfor %}

}
{% endfunc %}
{% func (thisForm *FormStructure) setFormDefaults(ns *forms.FieldsTable) %}
{%code
    if thisForm.Action == "" {
        thisForm.Action = "/admin/exec/"
    }
    if thisForm.IdCSS == "" {
            thisForm.IdCSS = "f" + ns.Name
    }
    if thisForm.Name == "" {
            thisForm.Name = ns.Name
        }
    if thisForm.Onload == "" {
        if str, ok := ns.DataJSOM["onload"]; ok {
                     thisForm.Onload = str.(string)
            }
    }

    if thisForm.Events != nil {

        if _, ok := thisForm.Events["successSaveForm"]; !ok {

            if ns.SaveFormEvents != nil {
                if val, ok1 := ns.SaveFormEvents["successSaveForm"]; ok1 {
                        thisForm.Events["successSaveForm"] = val
                }
            } else {
                thisForm.Events["successSaveForm"] = "afterSaveAnyForm"
            }
        }
    } else {

        thisForm.Events = make(map[string]string, 0)
        if ns.SaveFormEvents != nil {
            if val, ok := ns.SaveFormEvents["successSaveForm"]; ok {
                    thisForm.Events["successSaveForm"] = val
            }
        } else {
            thisForm.Events["successSaveForm"] = "afterSaveAnyForm"
        }
    }
%}
{% endfunc %}
{% endstripspace %}
