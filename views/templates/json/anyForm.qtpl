// Copyright 2017 Author: Ruslan Bikchentaev. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{% import (
    "strings"
    _ "github.com/ruslanBik4/httpgo/models/db"
    "github.com/ruslanBik4/httpgo/models/db/schema"
) %}

Формируем JSON, который затем будет использован в форме на клиенте
dataJson и содержимое AddJson вставляются КАК ЕСТЬ, ПОТОМУ ЧТО БЫЛИ ОБРАБОТАНЫ РАНЕЕ!!!
{% stripspace %}
{% func CheckFields(ns *schema.FieldsTable) %}

{% for _, field := range ns.Rows %}

    {% code

        titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
        typeInput := field.TypeInput()
    %}
    "{%s field.COLUMN_NAME %}": {
            {% if (field.COLUMN_NAME=="id") || field.IsHidden  %}
                "type": "hidden" },
                {% continue %}
            {% endif %}

    {% if field.IS_NULLABLE=="NO" %} "required": true, {% endif %}
    {% if titleFull > "" %} "title": "{%j titleFull %}", {% endif %}
    {% if titleLabel > "" %} "label": "{%j titleLabel %}", {% endif %}
    {% if placeholder > "" %} "placeholder": "{%s placeholder %}", {% endif %}
    {% if pattern > "" %} "pattern": "{%j= pattern %}", {% endif %}
    {% if dataJson > "" %} {%s= dataJson %}, {% endif %}
    {% if field.Value > "" %} "value": "{%j= field.Value %}", {% endif %}
    {% if field.CSSClass > "" %} "CSSClass": "{%s field.CSSClass %}",{% endif %}
    {% if field.CSSStyle > "" %} "CSSStyle": "{%s field.CSSStyle %}",{% endif %}
    {% if field.Figure > "" %}   "Figure": "{%s field.Figure %}",      {% endif %}
    {% if field.CHARACTER_MAXIMUM_LENGTH>0 %} "maxLength":{%d field.CHARACTER_MAXIMUM_LENGTH %}, {% endif %}
    {% if strings.Contains(field.COLUMN_TYPE, "unsigned") %}"min":0,{% endif %}
    {% if field.MinDate > "" %} "minDate": "{%s field.MinDate %}",  {% endif %}
    {% if field.MaxDate > "" %} "maxDate": "{%s field.MaxDate %}",  {% endif %}
    {% if len(field.Events) > 0 %}
        "Events": {
        {% for name, funcName := range field.Events %}
            "{%s name %}": "{%s funcName %}",
        {% endfor %}
        "count": {%d len(field.Events) %}
        },
    {% endif %}
    {% if field.COLUMN_DEFAULT > "" %}"default": "{%j= field.COLUMN_DEFAULT %}",{% endif %}
    {% if field.CHARACTER_SET_NAME > "" %}"charSet": "{%s field.CHARACTER_SET_NAME %}",{% endif %}
    {% if len(field.EnumValues) > 0 %}
        "list": [{% for i, val := range field.EnumValues %}{% if i>0 %},{% endif %}"{%j= val %}"{% endfor %}],
    {% elseif len(field.SelectValues) > 0 %}
        "list": {
            {% for key, val := range field.SelectValues %}
                "{%d key %}":"{%j= val %}",
            {% endfor %}
            "count": {%d len(ns.Rows) %}
        },
    {% endif %}

    {% if field.TABLEID %}
        {% code

         tableProps := strings.TrimPrefix(field.COLUMN_NAME, "tableid_")
         fields := schema.GetFieldsTable(tableProps)

        %}
        "list": {{%= CheckFields(&fields) %}},
    {% endif %}

    "type": "{%s typeInput %}"
            },
{% endfor %}
"count": {%d len(ns.Rows) %}

{% endfunc %}


{% func (thisForm *FormStructure) JSONAnyForm(ns *schema.FieldsTable, AddJson map[string] string) %}
{%code
   thisForm.setFormDefaults(ns)
%}
{
 "fields": {
    {%= CheckFields(ns) %}

},
"form": {
               {% if thisForm.ClassCSS != "" %} "class" : "{%s= thisForm.ClassCSS %}", {% endif %}
               "action" : "{%s= thisForm.Action %}",
               "id" : "{%s= thisForm.IdCSS %}",
               "name": "{%s= thisForm.Name %}"
                {% for name, event := range thisForm.Events %}
                    ,"{%s name %}": "{%s= event %}"
                {% endfor %}
   }
    {% for name, val := range AddJson %}
        ,"{%s name %}": {%s= val %}
    {% endfor %}

}
{% endfunc %}

{% endstripspace %}
