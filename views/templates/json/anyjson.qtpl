All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
выводим массив массивов (основное назначение для таблиц БД)

{% stripspace %}
{% collapsespace %}

{% func WriteSliceJSON(mapJSON MapMultiDimension) %}
[
{% for key, arrJSON := range mapJSON %}
    {% if key>0 %}, {% endif %} {%= WriteAnyJSON(arrJSON)%}
{% endfor %}
]
{% endfunc %}

получаем объект произвольной формы и возвращаем JSON текстом
{% func WriteAnyJSON(arrJSON MultiDimension) %}
{ {% code comma := "" %}
   {% for key, value := range arrJSON %}
        {%s comma %} "{%s key %}": {%= WriteElement(value)%} {% code  comma = "," %}
   {% endfor %}
 }
{% endfunc %}

пишем элемент массива в зависемости от типа
{% func WriteElement(value interface{}) %}
    {% switch vv := value.(type) %}
      {% case string %} "{%j= vv %}"
      {% case bool %} {%v vv %}
      {% case int, uint, int32, int64 %} {%d vv.(int) %}
      {% case float64 %} {%f vv %}
      {% case nil %}  null
      {% case StringDimension %} "type" : "StringDimension",
            {%= WriteStringDimension(vv) %}
      {% case SimpleDimension %} "type" : "SimpleDimension",
            {%= WriteSimpleDimension(vv) %}
      {% case MultiDimension %} "type" : "MultiDimension",
            {%= WriteAnyJSON(vv) %}
      {% case MapMultiDimension %} "type" : "MultiDimension",
            {%= WriteSliceJSON(vv) %}
      {% default %}
            {% if vSimple, ok := isSimpleDimension(vv); ok %}
                {%= WriteSimpleDimension(vSimple) %}
            {% elseif arrJSON, ok := isMultiDimension(vv); ok %}
                {%= WriteAnyJSON(arrJSON) %}
            {% elseif mapArrJSON, ok := isMapMultiDimension(vv); ok %}
                {%= WriteSliceJSON(mapArrJSON) %}
            {% else %}
                "{%v vv %}"
            {% endif %}
     {% endswitch %}
{% endfunc %}
получаем массив произвольной формы и возвращаем JSON текстом
{% func WriteArrJSON(arrJSON []interface{} ) %}
 [ {% code comma := "" %}
    {% for key, value := range  arrJSON %} {%s comma %} {%d key %}:{%= WriteElement(value) %} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив объектов произвольной формы и возвращаем JSON текстом
{% func WriteSimpleDimension(arrJSON SimpleDimension ) %}
[  {% code comma := "" %}
    {% for key, value := range  arrJSON %} {%s comma %} {%d key %}:{%= WriteElement(value)%} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив строк и возвращаем JSON текстом
{% func WriteStringDimension(arrJSON StringDimension) %}
 [ {% code comma := "" %}
    {% for key, value := range  arrJSON %} {%s comma %} {%d key %}:{%= WriteElement(value)%} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
{% endstripspace %}
{% endcollapsespace %}

